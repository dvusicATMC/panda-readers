/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.atomic.document;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class TextDocument extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4954817181858992369L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TextDocument\",\"namespace\":\"com.atomic.document\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Id is mandatory! For file document id = MD5(creator + fileName + timestampCreated). If one of properties missing replace with empty string (\\\"\\\")\"},{\"name\":\"parentId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"chunkId\",\"type\":\"int\"},{\"name\":\"totalChunks\",\"type\":\"int\"},{\"name\":\"readerSource\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"content\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"detectedTime\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}]},{\"name\":\"type\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"language\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"ocrInfo\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"OcrInfo\",\"fields\":[{\"name\":\"boundingBoxSpans\",\"type\":[\"null\",{\"type\":\"array\",\"items\":[\"null\",{\"type\":\"record\",\"name\":\"BoundingBoxSpan\",\"fields\":[{\"name\":\"bounding_box\",\"type\":[\"null\",{\"type\":\"array\",\"items\":[\"null\",{\"type\":\"array\",\"items\":[\"null\",\"int\"]}]}],\"default\":null},{\"name\":\"end\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"start\",\"type\":[\"null\",\"int\"],\"default\":null}]}]}],\"default\":null}]}]},{\"name\":\"container\",\"type\":{\"type\":\"record\",\"name\":\"Container\",\"fields\":[{\"name\":\"containerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"parent_id\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"name\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"containerType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"containerMetadata\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}},{\"name\":\"fileInfo\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"FileInfo\",\"fields\":[{\"name\":\"fileName\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"fileDefinition\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"FileDefinition\",\"fields\":[{\"name\":\"timestampCreated\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"doc\":\"File timestamp created from java BasicFileAttributes. When moving file from one folder to another on OS this property will be changed, while documentDateCreated stays same!\"},{\"name\":\"extension\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}]},{\"name\":\"fileMetadata\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"FileMetadata\",\"fields\":[{\"name\":\"filePath\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"size\",\"type\":[\"null\",\"long\"]},{\"name\":\"timestampModified\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"doc\":\"File timestamp modified from java BasicFileAttributes.\"},{\"name\":\"timestampLastAccess\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"doc\":\"File timestamp of last access.\"},{\"name\":\"isSystem\",\"type\":[\"null\",\"boolean\"]},{\"name\":\"isArchive\",\"type\":[\"null\",\"boolean\"]},{\"name\":\"isHidden\",\"type\":[\"null\",\"boolean\"]},{\"name\":\"isReadOnly\",\"type\":[\"null\",\"boolean\"]}]}]},{\"name\":\"security\",\"type\":{\"type\":\"record\",\"name\":\"Security\",\"fields\":[{\"name\":\"owner\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"group\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"permission\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}}]}]},{\"name\":\"mailInfo\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"MailInfo\",\"fields\":[{\"name\":\"subject\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"mailDefinition\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"MailDefinition\",\"fields\":[{\"name\":\"mailTo\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]},{\"name\":\"mailFrom\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"mailCC\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]},{\"name\":\"mailBCC\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]},{\"name\":\"replyTo\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Addresses to which replies should be directed. This will usually be the sender of the message, but some messages may direct replies to a different address\"},{\"name\":\"sentDate\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}]},{\"name\":\"receivedDate\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}]}]}]},{\"name\":\"mailMetadata\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"MailMetadata\",\"fields\":[{\"name\":\"folderName\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"isAnswered\",\"type\":[\"null\",\"boolean\"]},{\"name\":\"isDeleted\",\"type\":[\"null\",\"boolean\"]},{\"name\":\"isDraft\",\"type\":[\"null\",\"boolean\"]},{\"name\":\"isRecent\",\"type\":[\"null\",\"boolean\"]},{\"name\":\"isSeen\",\"type\":[\"null\",\"boolean\"]},{\"name\":\"isUser\",\"type\":[\"null\",\"boolean\"],\"doc\":\"A special flag that indicates that this folder supports user defined flags.\"},{\"name\":\"isExpunged\",\"type\":[\"null\",\"boolean\"],\"doc\":\"Messages that are expunged due to an explict expunge() request on the containing Folder are removed from the Folder immediately. Messages that are externally expunged by another source are marked \\\"expunged\\\" and return true for the isExpunged() method, but they are not removed from the Folder until an explicit expunge() is done on the Folder.\"}]}]}]}]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
  }

  private static final BinaryMessageEncoder<TextDocument> ENCODER =
      new BinaryMessageEncoder<TextDocument>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<TextDocument> DECODER =
      new BinaryMessageDecoder<TextDocument>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<TextDocument> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<TextDocument> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<TextDocument> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<TextDocument>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this TextDocument to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a TextDocument from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a TextDocument instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static TextDocument fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Id is mandatory! For file document id = MD5(creator + fileName + timestampCreated). If one of properties missing replace with empty string ("") */
  private java.lang.String id;
  private java.lang.String parentId;
  private int chunkId;
  private int totalChunks;
  private java.lang.String readerSource;
  private java.lang.String content;
  private java.time.Instant detectedTime;
  private java.lang.String type;
  private java.lang.String language;
  private com.atomic.document.OcrInfo ocrInfo;
  private com.atomic.document.Container container;
  private com.atomic.document.FileInfo fileInfo;
  private com.atomic.document.MailInfo mailInfo;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TextDocument() {}

  /**
   * All-args constructor.
   * @param id Id is mandatory! For file document id = MD5(creator + fileName + timestampCreated). If one of properties missing replace with empty string ("")
   * @param parentId The new value for parentId
   * @param chunkId The new value for chunkId
   * @param totalChunks The new value for totalChunks
   * @param readerSource The new value for readerSource
   * @param content The new value for content
   * @param detectedTime The new value for detectedTime
   * @param type The new value for type
   * @param language The new value for language
   * @param ocrInfo The new value for ocrInfo
   * @param container The new value for container
   * @param fileInfo The new value for fileInfo
   * @param mailInfo The new value for mailInfo
   */
  public TextDocument(java.lang.String id, java.lang.String parentId, java.lang.Integer chunkId, java.lang.Integer totalChunks, java.lang.String readerSource, java.lang.String content, java.time.Instant detectedTime, java.lang.String type, java.lang.String language, com.atomic.document.OcrInfo ocrInfo, com.atomic.document.Container container, com.atomic.document.FileInfo fileInfo, com.atomic.document.MailInfo mailInfo) {
    this.id = id;
    this.parentId = parentId;
    this.chunkId = chunkId;
    this.totalChunks = totalChunks;
    this.readerSource = readerSource;
    this.content = content;
    this.detectedTime = detectedTime;
    this.type = type;
    this.language = language;
    this.ocrInfo = ocrInfo;
    this.container = container;
    this.fileInfo = fileInfo;
    this.mailInfo = mailInfo;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return parentId;
    case 2: return chunkId;
    case 3: return totalChunks;
    case 4: return readerSource;
    case 5: return content;
    case 6: return detectedTime;
    case 7: return type;
    case 8: return language;
    case 9: return ocrInfo;
    case 10: return container;
    case 11: return fileInfo;
    case 12: return mailInfo;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = value$ != null ? value$.toString() : null; break;
    case 1: parentId = value$ != null ? value$.toString() : null; break;
    case 2: chunkId = (java.lang.Integer)value$; break;
    case 3: totalChunks = (java.lang.Integer)value$; break;
    case 4: readerSource = value$ != null ? value$.toString() : null; break;
    case 5: content = value$ != null ? value$.toString() : null; break;
    case 6: detectedTime = (java.time.Instant)value$; break;
    case 7: type = value$ != null ? value$.toString() : null; break;
    case 8: language = value$ != null ? value$.toString() : null; break;
    case 9: ocrInfo = (com.atomic.document.OcrInfo)value$; break;
    case 10: container = (com.atomic.document.Container)value$; break;
    case 11: fileInfo = (com.atomic.document.FileInfo)value$; break;
    case 12: mailInfo = (com.atomic.document.MailInfo)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return Id is mandatory! For file document id = MD5(creator + fileName + timestampCreated). If one of properties missing replace with empty string ("")
   */
  public java.lang.String getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * Id is mandatory! For file document id = MD5(creator + fileName + timestampCreated). If one of properties missing replace with empty string ("")
   * @param value the value to set.
   */
  public void setId(java.lang.String value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'parentId' field.
   * @return The value of the 'parentId' field.
   */
  public java.lang.String getParentId() {
    return parentId;
  }


  /**
   * Sets the value of the 'parentId' field.
   * @param value the value to set.
   */
  public void setParentId(java.lang.String value) {
    this.parentId = value;
  }

  /**
   * Gets the value of the 'chunkId' field.
   * @return The value of the 'chunkId' field.
   */
  public int getChunkId() {
    return chunkId;
  }


  /**
   * Sets the value of the 'chunkId' field.
   * @param value the value to set.
   */
  public void setChunkId(int value) {
    this.chunkId = value;
  }

  /**
   * Gets the value of the 'totalChunks' field.
   * @return The value of the 'totalChunks' field.
   */
  public int getTotalChunks() {
    return totalChunks;
  }


  /**
   * Sets the value of the 'totalChunks' field.
   * @param value the value to set.
   */
  public void setTotalChunks(int value) {
    this.totalChunks = value;
  }

  /**
   * Gets the value of the 'readerSource' field.
   * @return The value of the 'readerSource' field.
   */
  public java.lang.String getReaderSource() {
    return readerSource;
  }


  /**
   * Sets the value of the 'readerSource' field.
   * @param value the value to set.
   */
  public void setReaderSource(java.lang.String value) {
    this.readerSource = value;
  }

  /**
   * Gets the value of the 'content' field.
   * @return The value of the 'content' field.
   */
  public java.lang.String getContent() {
    return content;
  }


  /**
   * Sets the value of the 'content' field.
   * @param value the value to set.
   */
  public void setContent(java.lang.String value) {
    this.content = value;
  }

  /**
   * Gets the value of the 'detectedTime' field.
   * @return The value of the 'detectedTime' field.
   */
  public java.time.Instant getDetectedTime() {
    return detectedTime;
  }


  /**
   * Sets the value of the 'detectedTime' field.
   * @param value the value to set.
   */
  public void setDetectedTime(java.time.Instant value) {
    this.detectedTime = value;
  }

  /**
   * Gets the value of the 'type' field.
   * @return The value of the 'type' field.
   */
  public java.lang.String getType() {
    return type;
  }


  /**
   * Sets the value of the 'type' field.
   * @param value the value to set.
   */
  public void setType(java.lang.String value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'language' field.
   * @return The value of the 'language' field.
   */
  public java.lang.String getLanguage() {
    return language;
  }


  /**
   * Sets the value of the 'language' field.
   * @param value the value to set.
   */
  public void setLanguage(java.lang.String value) {
    this.language = value;
  }

  /**
   * Gets the value of the 'ocrInfo' field.
   * @return The value of the 'ocrInfo' field.
   */
  public com.atomic.document.OcrInfo getOcrInfo() {
    return ocrInfo;
  }


  /**
   * Sets the value of the 'ocrInfo' field.
   * @param value the value to set.
   */
  public void setOcrInfo(com.atomic.document.OcrInfo value) {
    this.ocrInfo = value;
  }

  /**
   * Gets the value of the 'container' field.
   * @return The value of the 'container' field.
   */
  public com.atomic.document.Container getContainer() {
    return container;
  }


  /**
   * Sets the value of the 'container' field.
   * @param value the value to set.
   */
  public void setContainer(com.atomic.document.Container value) {
    this.container = value;
  }

  /**
   * Gets the value of the 'fileInfo' field.
   * @return The value of the 'fileInfo' field.
   */
  public com.atomic.document.FileInfo getFileInfo() {
    return fileInfo;
  }


  /**
   * Sets the value of the 'fileInfo' field.
   * @param value the value to set.
   */
  public void setFileInfo(com.atomic.document.FileInfo value) {
    this.fileInfo = value;
  }

  /**
   * Gets the value of the 'mailInfo' field.
   * @return The value of the 'mailInfo' field.
   */
  public com.atomic.document.MailInfo getMailInfo() {
    return mailInfo;
  }


  /**
   * Sets the value of the 'mailInfo' field.
   * @param value the value to set.
   */
  public void setMailInfo(com.atomic.document.MailInfo value) {
    this.mailInfo = value;
  }

  /**
   * Creates a new TextDocument RecordBuilder.
   * @return A new TextDocument RecordBuilder
   */
  public static com.atomic.document.TextDocument.Builder newBuilder() {
    return new com.atomic.document.TextDocument.Builder();
  }

  /**
   * Creates a new TextDocument RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TextDocument RecordBuilder
   */
  public static com.atomic.document.TextDocument.Builder newBuilder(com.atomic.document.TextDocument.Builder other) {
    if (other == null) {
      return new com.atomic.document.TextDocument.Builder();
    } else {
      return new com.atomic.document.TextDocument.Builder(other);
    }
  }

  /**
   * Creates a new TextDocument RecordBuilder by copying an existing TextDocument instance.
   * @param other The existing instance to copy.
   * @return A new TextDocument RecordBuilder
   */
  public static com.atomic.document.TextDocument.Builder newBuilder(com.atomic.document.TextDocument other) {
    if (other == null) {
      return new com.atomic.document.TextDocument.Builder();
    } else {
      return new com.atomic.document.TextDocument.Builder(other);
    }
  }

  /**
   * RecordBuilder for TextDocument instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TextDocument>
    implements org.apache.avro.data.RecordBuilder<TextDocument> {

    /** Id is mandatory! For file document id = MD5(creator + fileName + timestampCreated). If one of properties missing replace with empty string ("") */
    private java.lang.String id;
    private java.lang.String parentId;
    private int chunkId;
    private int totalChunks;
    private java.lang.String readerSource;
    private java.lang.String content;
    private java.time.Instant detectedTime;
    private java.lang.String type;
    private java.lang.String language;
    private com.atomic.document.OcrInfo ocrInfo;
    private com.atomic.document.OcrInfo.Builder ocrInfoBuilder;
    private com.atomic.document.Container container;
    private com.atomic.document.Container.Builder containerBuilder;
    private com.atomic.document.FileInfo fileInfo;
    private com.atomic.document.FileInfo.Builder fileInfoBuilder;
    private com.atomic.document.MailInfo mailInfo;
    private com.atomic.document.MailInfo.Builder mailInfoBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.atomic.document.TextDocument.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.parentId)) {
        this.parentId = data().deepCopy(fields()[1].schema(), other.parentId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.chunkId)) {
        this.chunkId = data().deepCopy(fields()[2].schema(), other.chunkId);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.totalChunks)) {
        this.totalChunks = data().deepCopy(fields()[3].schema(), other.totalChunks);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.readerSource)) {
        this.readerSource = data().deepCopy(fields()[4].schema(), other.readerSource);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.content)) {
        this.content = data().deepCopy(fields()[5].schema(), other.content);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.detectedTime)) {
        this.detectedTime = data().deepCopy(fields()[6].schema(), other.detectedTime);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.type)) {
        this.type = data().deepCopy(fields()[7].schema(), other.type);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.language)) {
        this.language = data().deepCopy(fields()[8].schema(), other.language);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.ocrInfo)) {
        this.ocrInfo = data().deepCopy(fields()[9].schema(), other.ocrInfo);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (other.hasOcrInfoBuilder()) {
        this.ocrInfoBuilder = com.atomic.document.OcrInfo.newBuilder(other.getOcrInfoBuilder());
      }
      if (isValidValue(fields()[10], other.container)) {
        this.container = data().deepCopy(fields()[10].schema(), other.container);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (other.hasContainerBuilder()) {
        this.containerBuilder = com.atomic.document.Container.newBuilder(other.getContainerBuilder());
      }
      if (isValidValue(fields()[11], other.fileInfo)) {
        this.fileInfo = data().deepCopy(fields()[11].schema(), other.fileInfo);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (other.hasFileInfoBuilder()) {
        this.fileInfoBuilder = com.atomic.document.FileInfo.newBuilder(other.getFileInfoBuilder());
      }
      if (isValidValue(fields()[12], other.mailInfo)) {
        this.mailInfo = data().deepCopy(fields()[12].schema(), other.mailInfo);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
      if (other.hasMailInfoBuilder()) {
        this.mailInfoBuilder = com.atomic.document.MailInfo.newBuilder(other.getMailInfoBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing TextDocument instance
     * @param other The existing instance to copy.
     */
    private Builder(com.atomic.document.TextDocument other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.parentId)) {
        this.parentId = data().deepCopy(fields()[1].schema(), other.parentId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.chunkId)) {
        this.chunkId = data().deepCopy(fields()[2].schema(), other.chunkId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.totalChunks)) {
        this.totalChunks = data().deepCopy(fields()[3].schema(), other.totalChunks);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.readerSource)) {
        this.readerSource = data().deepCopy(fields()[4].schema(), other.readerSource);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.content)) {
        this.content = data().deepCopy(fields()[5].schema(), other.content);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.detectedTime)) {
        this.detectedTime = data().deepCopy(fields()[6].schema(), other.detectedTime);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.type)) {
        this.type = data().deepCopy(fields()[7].schema(), other.type);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.language)) {
        this.language = data().deepCopy(fields()[8].schema(), other.language);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.ocrInfo)) {
        this.ocrInfo = data().deepCopy(fields()[9].schema(), other.ocrInfo);
        fieldSetFlags()[9] = true;
      }
      this.ocrInfoBuilder = null;
      if (isValidValue(fields()[10], other.container)) {
        this.container = data().deepCopy(fields()[10].schema(), other.container);
        fieldSetFlags()[10] = true;
      }
      this.containerBuilder = null;
      if (isValidValue(fields()[11], other.fileInfo)) {
        this.fileInfo = data().deepCopy(fields()[11].schema(), other.fileInfo);
        fieldSetFlags()[11] = true;
      }
      this.fileInfoBuilder = null;
      if (isValidValue(fields()[12], other.mailInfo)) {
        this.mailInfo = data().deepCopy(fields()[12].schema(), other.mailInfo);
        fieldSetFlags()[12] = true;
      }
      this.mailInfoBuilder = null;
    }

    /**
      * Gets the value of the 'id' field.
      * Id is mandatory! For file document id = MD5(creator + fileName + timestampCreated). If one of properties missing replace with empty string ("")
      * @return The value.
      */
    public java.lang.String getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * Id is mandatory! For file document id = MD5(creator + fileName + timestampCreated). If one of properties missing replace with empty string ("")
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.atomic.document.TextDocument.Builder setId(java.lang.String value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * Id is mandatory! For file document id = MD5(creator + fileName + timestampCreated). If one of properties missing replace with empty string ("")
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * Id is mandatory! For file document id = MD5(creator + fileName + timestampCreated). If one of properties missing replace with empty string ("")
      * @return This builder.
      */
    public com.atomic.document.TextDocument.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'parentId' field.
      * @return The value.
      */
    public java.lang.String getParentId() {
      return parentId;
    }


    /**
      * Sets the value of the 'parentId' field.
      * @param value The value of 'parentId'.
      * @return This builder.
      */
    public com.atomic.document.TextDocument.Builder setParentId(java.lang.String value) {
      validate(fields()[1], value);
      this.parentId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'parentId' field has been set.
      * @return True if the 'parentId' field has been set, false otherwise.
      */
    public boolean hasParentId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'parentId' field.
      * @return This builder.
      */
    public com.atomic.document.TextDocument.Builder clearParentId() {
      parentId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'chunkId' field.
      * @return The value.
      */
    public int getChunkId() {
      return chunkId;
    }


    /**
      * Sets the value of the 'chunkId' field.
      * @param value The value of 'chunkId'.
      * @return This builder.
      */
    public com.atomic.document.TextDocument.Builder setChunkId(int value) {
      validate(fields()[2], value);
      this.chunkId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'chunkId' field has been set.
      * @return True if the 'chunkId' field has been set, false otherwise.
      */
    public boolean hasChunkId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'chunkId' field.
      * @return This builder.
      */
    public com.atomic.document.TextDocument.Builder clearChunkId() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalChunks' field.
      * @return The value.
      */
    public int getTotalChunks() {
      return totalChunks;
    }


    /**
      * Sets the value of the 'totalChunks' field.
      * @param value The value of 'totalChunks'.
      * @return This builder.
      */
    public com.atomic.document.TextDocument.Builder setTotalChunks(int value) {
      validate(fields()[3], value);
      this.totalChunks = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'totalChunks' field has been set.
      * @return True if the 'totalChunks' field has been set, false otherwise.
      */
    public boolean hasTotalChunks() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'totalChunks' field.
      * @return This builder.
      */
    public com.atomic.document.TextDocument.Builder clearTotalChunks() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'readerSource' field.
      * @return The value.
      */
    public java.lang.String getReaderSource() {
      return readerSource;
    }


    /**
      * Sets the value of the 'readerSource' field.
      * @param value The value of 'readerSource'.
      * @return This builder.
      */
    public com.atomic.document.TextDocument.Builder setReaderSource(java.lang.String value) {
      validate(fields()[4], value);
      this.readerSource = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'readerSource' field has been set.
      * @return True if the 'readerSource' field has been set, false otherwise.
      */
    public boolean hasReaderSource() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'readerSource' field.
      * @return This builder.
      */
    public com.atomic.document.TextDocument.Builder clearReaderSource() {
      readerSource = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'content' field.
      * @return The value.
      */
    public java.lang.String getContent() {
      return content;
    }


    /**
      * Sets the value of the 'content' field.
      * @param value The value of 'content'.
      * @return This builder.
      */
    public com.atomic.document.TextDocument.Builder setContent(java.lang.String value) {
      validate(fields()[5], value);
      this.content = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'content' field has been set.
      * @return True if the 'content' field has been set, false otherwise.
      */
    public boolean hasContent() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'content' field.
      * @return This builder.
      */
    public com.atomic.document.TextDocument.Builder clearContent() {
      content = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'detectedTime' field.
      * @return The value.
      */
    public java.time.Instant getDetectedTime() {
      return detectedTime;
    }


    /**
      * Sets the value of the 'detectedTime' field.
      * @param value The value of 'detectedTime'.
      * @return This builder.
      */
    public com.atomic.document.TextDocument.Builder setDetectedTime(java.time.Instant value) {
      validate(fields()[6], value);
      this.detectedTime = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'detectedTime' field has been set.
      * @return True if the 'detectedTime' field has been set, false otherwise.
      */
    public boolean hasDetectedTime() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'detectedTime' field.
      * @return This builder.
      */
    public com.atomic.document.TextDocument.Builder clearDetectedTime() {
      detectedTime = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'type' field.
      * @return The value.
      */
    public java.lang.String getType() {
      return type;
    }


    /**
      * Sets the value of the 'type' field.
      * @param value The value of 'type'.
      * @return This builder.
      */
    public com.atomic.document.TextDocument.Builder setType(java.lang.String value) {
      validate(fields()[7], value);
      this.type = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'type' field.
      * @return This builder.
      */
    public com.atomic.document.TextDocument.Builder clearType() {
      type = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'language' field.
      * @return The value.
      */
    public java.lang.String getLanguage() {
      return language;
    }


    /**
      * Sets the value of the 'language' field.
      * @param value The value of 'language'.
      * @return This builder.
      */
    public com.atomic.document.TextDocument.Builder setLanguage(java.lang.String value) {
      validate(fields()[8], value);
      this.language = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'language' field has been set.
      * @return True if the 'language' field has been set, false otherwise.
      */
    public boolean hasLanguage() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'language' field.
      * @return This builder.
      */
    public com.atomic.document.TextDocument.Builder clearLanguage() {
      language = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'ocrInfo' field.
      * @return The value.
      */
    public com.atomic.document.OcrInfo getOcrInfo() {
      return ocrInfo;
    }


    /**
      * Sets the value of the 'ocrInfo' field.
      * @param value The value of 'ocrInfo'.
      * @return This builder.
      */
    public com.atomic.document.TextDocument.Builder setOcrInfo(com.atomic.document.OcrInfo value) {
      validate(fields()[9], value);
      this.ocrInfoBuilder = null;
      this.ocrInfo = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'ocrInfo' field has been set.
      * @return True if the 'ocrInfo' field has been set, false otherwise.
      */
    public boolean hasOcrInfo() {
      return fieldSetFlags()[9];
    }

    /**
     * Gets the Builder instance for the 'ocrInfo' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.atomic.document.OcrInfo.Builder getOcrInfoBuilder() {
      if (ocrInfoBuilder == null) {
        if (hasOcrInfo()) {
          setOcrInfoBuilder(com.atomic.document.OcrInfo.newBuilder(ocrInfo));
        } else {
          setOcrInfoBuilder(com.atomic.document.OcrInfo.newBuilder());
        }
      }
      return ocrInfoBuilder;
    }

    /**
     * Sets the Builder instance for the 'ocrInfo' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.atomic.document.TextDocument.Builder setOcrInfoBuilder(com.atomic.document.OcrInfo.Builder value) {
      clearOcrInfo();
      ocrInfoBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'ocrInfo' field has an active Builder instance
     * @return True if the 'ocrInfo' field has an active Builder instance
     */
    public boolean hasOcrInfoBuilder() {
      return ocrInfoBuilder != null;
    }

    /**
      * Clears the value of the 'ocrInfo' field.
      * @return This builder.
      */
    public com.atomic.document.TextDocument.Builder clearOcrInfo() {
      ocrInfo = null;
      ocrInfoBuilder = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'container' field.
      * @return The value.
      */
    public com.atomic.document.Container getContainer() {
      return container;
    }


    /**
      * Sets the value of the 'container' field.
      * @param value The value of 'container'.
      * @return This builder.
      */
    public com.atomic.document.TextDocument.Builder setContainer(com.atomic.document.Container value) {
      validate(fields()[10], value);
      this.containerBuilder = null;
      this.container = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'container' field has been set.
      * @return True if the 'container' field has been set, false otherwise.
      */
    public boolean hasContainer() {
      return fieldSetFlags()[10];
    }

    /**
     * Gets the Builder instance for the 'container' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.atomic.document.Container.Builder getContainerBuilder() {
      if (containerBuilder == null) {
        if (hasContainer()) {
          setContainerBuilder(com.atomic.document.Container.newBuilder(container));
        } else {
          setContainerBuilder(com.atomic.document.Container.newBuilder());
        }
      }
      return containerBuilder;
    }

    /**
     * Sets the Builder instance for the 'container' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.atomic.document.TextDocument.Builder setContainerBuilder(com.atomic.document.Container.Builder value) {
      clearContainer();
      containerBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'container' field has an active Builder instance
     * @return True if the 'container' field has an active Builder instance
     */
    public boolean hasContainerBuilder() {
      return containerBuilder != null;
    }

    /**
      * Clears the value of the 'container' field.
      * @return This builder.
      */
    public com.atomic.document.TextDocument.Builder clearContainer() {
      container = null;
      containerBuilder = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'fileInfo' field.
      * @return The value.
      */
    public com.atomic.document.FileInfo getFileInfo() {
      return fileInfo;
    }


    /**
      * Sets the value of the 'fileInfo' field.
      * @param value The value of 'fileInfo'.
      * @return This builder.
      */
    public com.atomic.document.TextDocument.Builder setFileInfo(com.atomic.document.FileInfo value) {
      validate(fields()[11], value);
      this.fileInfoBuilder = null;
      this.fileInfo = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'fileInfo' field has been set.
      * @return True if the 'fileInfo' field has been set, false otherwise.
      */
    public boolean hasFileInfo() {
      return fieldSetFlags()[11];
    }

    /**
     * Gets the Builder instance for the 'fileInfo' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.atomic.document.FileInfo.Builder getFileInfoBuilder() {
      if (fileInfoBuilder == null) {
        if (hasFileInfo()) {
          setFileInfoBuilder(com.atomic.document.FileInfo.newBuilder(fileInfo));
        } else {
          setFileInfoBuilder(com.atomic.document.FileInfo.newBuilder());
        }
      }
      return fileInfoBuilder;
    }

    /**
     * Sets the Builder instance for the 'fileInfo' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.atomic.document.TextDocument.Builder setFileInfoBuilder(com.atomic.document.FileInfo.Builder value) {
      clearFileInfo();
      fileInfoBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'fileInfo' field has an active Builder instance
     * @return True if the 'fileInfo' field has an active Builder instance
     */
    public boolean hasFileInfoBuilder() {
      return fileInfoBuilder != null;
    }

    /**
      * Clears the value of the 'fileInfo' field.
      * @return This builder.
      */
    public com.atomic.document.TextDocument.Builder clearFileInfo() {
      fileInfo = null;
      fileInfoBuilder = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'mailInfo' field.
      * @return The value.
      */
    public com.atomic.document.MailInfo getMailInfo() {
      return mailInfo;
    }


    /**
      * Sets the value of the 'mailInfo' field.
      * @param value The value of 'mailInfo'.
      * @return This builder.
      */
    public com.atomic.document.TextDocument.Builder setMailInfo(com.atomic.document.MailInfo value) {
      validate(fields()[12], value);
      this.mailInfoBuilder = null;
      this.mailInfo = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'mailInfo' field has been set.
      * @return True if the 'mailInfo' field has been set, false otherwise.
      */
    public boolean hasMailInfo() {
      return fieldSetFlags()[12];
    }

    /**
     * Gets the Builder instance for the 'mailInfo' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.atomic.document.MailInfo.Builder getMailInfoBuilder() {
      if (mailInfoBuilder == null) {
        if (hasMailInfo()) {
          setMailInfoBuilder(com.atomic.document.MailInfo.newBuilder(mailInfo));
        } else {
          setMailInfoBuilder(com.atomic.document.MailInfo.newBuilder());
        }
      }
      return mailInfoBuilder;
    }

    /**
     * Sets the Builder instance for the 'mailInfo' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.atomic.document.TextDocument.Builder setMailInfoBuilder(com.atomic.document.MailInfo.Builder value) {
      clearMailInfo();
      mailInfoBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'mailInfo' field has an active Builder instance
     * @return True if the 'mailInfo' field has an active Builder instance
     */
    public boolean hasMailInfoBuilder() {
      return mailInfoBuilder != null;
    }

    /**
      * Clears the value of the 'mailInfo' field.
      * @return This builder.
      */
    public com.atomic.document.TextDocument.Builder clearMailInfo() {
      mailInfo = null;
      mailInfoBuilder = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public TextDocument build() {
      try {
        TextDocument record = new TextDocument();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.String) defaultValue(fields()[0]);
        record.parentId = fieldSetFlags()[1] ? this.parentId : (java.lang.String) defaultValue(fields()[1]);
        record.chunkId = fieldSetFlags()[2] ? this.chunkId : (java.lang.Integer) defaultValue(fields()[2]);
        record.totalChunks = fieldSetFlags()[3] ? this.totalChunks : (java.lang.Integer) defaultValue(fields()[3]);
        record.readerSource = fieldSetFlags()[4] ? this.readerSource : (java.lang.String) defaultValue(fields()[4]);
        record.content = fieldSetFlags()[5] ? this.content : (java.lang.String) defaultValue(fields()[5]);
        record.detectedTime = fieldSetFlags()[6] ? this.detectedTime : (java.time.Instant) defaultValue(fields()[6]);
        record.type = fieldSetFlags()[7] ? this.type : (java.lang.String) defaultValue(fields()[7]);
        record.language = fieldSetFlags()[8] ? this.language : (java.lang.String) defaultValue(fields()[8]);
        if (ocrInfoBuilder != null) {
          try {
            record.ocrInfo = this.ocrInfoBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("ocrInfo"));
            throw e;
          }
        } else {
          record.ocrInfo = fieldSetFlags()[9] ? this.ocrInfo : (com.atomic.document.OcrInfo) defaultValue(fields()[9]);
        }
        if (containerBuilder != null) {
          try {
            record.container = this.containerBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("container"));
            throw e;
          }
        } else {
          record.container = fieldSetFlags()[10] ? this.container : (com.atomic.document.Container) defaultValue(fields()[10]);
        }
        if (fileInfoBuilder != null) {
          try {
            record.fileInfo = this.fileInfoBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("fileInfo"));
            throw e;
          }
        } else {
          record.fileInfo = fieldSetFlags()[11] ? this.fileInfo : (com.atomic.document.FileInfo) defaultValue(fields()[11]);
        }
        if (mailInfoBuilder != null) {
          try {
            record.mailInfo = this.mailInfoBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("mailInfo"));
            throw e;
          }
        } else {
          record.mailInfo = fieldSetFlags()[12] ? this.mailInfo : (com.atomic.document.MailInfo) defaultValue(fields()[12]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<TextDocument>
    WRITER$ = (org.apache.avro.io.DatumWriter<TextDocument>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<TextDocument>
    READER$ = (org.apache.avro.io.DatumReader<TextDocument>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










