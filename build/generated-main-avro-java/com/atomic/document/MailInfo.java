/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.atomic.document;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class MailInfo extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 5897027629914880856L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"MailInfo\",\"namespace\":\"com.atomic.document\",\"fields\":[{\"name\":\"subject\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"mailDefinition\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"MailDefinition\",\"fields\":[{\"name\":\"mailTo\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]},{\"name\":\"mailFrom\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"mailCC\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]},{\"name\":\"mailBCC\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]},{\"name\":\"replyTo\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Addresses to which replies should be directed. This will usually be the sender of the message, but some messages may direct replies to a different address\"},{\"name\":\"sentDate\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}]},{\"name\":\"receivedDate\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}]}]}]},{\"name\":\"mailMetadata\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"MailMetadata\",\"fields\":[{\"name\":\"folderName\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"isAnswered\",\"type\":[\"null\",\"boolean\"]},{\"name\":\"isDeleted\",\"type\":[\"null\",\"boolean\"]},{\"name\":\"isDraft\",\"type\":[\"null\",\"boolean\"]},{\"name\":\"isRecent\",\"type\":[\"null\",\"boolean\"]},{\"name\":\"isSeen\",\"type\":[\"null\",\"boolean\"]},{\"name\":\"isUser\",\"type\":[\"null\",\"boolean\"],\"doc\":\"A special flag that indicates that this folder supports user defined flags.\"},{\"name\":\"isExpunged\",\"type\":[\"null\",\"boolean\"],\"doc\":\"Messages that are expunged due to an explict expunge() request on the containing Folder are removed from the Folder immediately. Messages that are externally expunged by another source are marked \\\"expunged\\\" and return true for the isExpunged() method, but they are not removed from the Folder until an explicit expunge() is done on the Folder.\"}]}]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
  }

  private static final BinaryMessageEncoder<MailInfo> ENCODER =
      new BinaryMessageEncoder<MailInfo>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<MailInfo> DECODER =
      new BinaryMessageDecoder<MailInfo>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<MailInfo> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<MailInfo> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<MailInfo> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<MailInfo>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this MailInfo to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a MailInfo from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a MailInfo instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static MailInfo fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.String subject;
  private com.atomic.document.MailDefinition mailDefinition;
  private com.atomic.document.MailMetadata mailMetadata;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public MailInfo() {}

  /**
   * All-args constructor.
   * @param subject The new value for subject
   * @param mailDefinition The new value for mailDefinition
   * @param mailMetadata The new value for mailMetadata
   */
  public MailInfo(java.lang.String subject, com.atomic.document.MailDefinition mailDefinition, com.atomic.document.MailMetadata mailMetadata) {
    this.subject = subject;
    this.mailDefinition = mailDefinition;
    this.mailMetadata = mailMetadata;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return subject;
    case 1: return mailDefinition;
    case 2: return mailMetadata;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: subject = value$ != null ? value$.toString() : null; break;
    case 1: mailDefinition = (com.atomic.document.MailDefinition)value$; break;
    case 2: mailMetadata = (com.atomic.document.MailMetadata)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'subject' field.
   * @return The value of the 'subject' field.
   */
  public java.lang.String getSubject() {
    return subject;
  }


  /**
   * Sets the value of the 'subject' field.
   * @param value the value to set.
   */
  public void setSubject(java.lang.String value) {
    this.subject = value;
  }

  /**
   * Gets the value of the 'mailDefinition' field.
   * @return The value of the 'mailDefinition' field.
   */
  public com.atomic.document.MailDefinition getMailDefinition() {
    return mailDefinition;
  }


  /**
   * Sets the value of the 'mailDefinition' field.
   * @param value the value to set.
   */
  public void setMailDefinition(com.atomic.document.MailDefinition value) {
    this.mailDefinition = value;
  }

  /**
   * Gets the value of the 'mailMetadata' field.
   * @return The value of the 'mailMetadata' field.
   */
  public com.atomic.document.MailMetadata getMailMetadata() {
    return mailMetadata;
  }


  /**
   * Sets the value of the 'mailMetadata' field.
   * @param value the value to set.
   */
  public void setMailMetadata(com.atomic.document.MailMetadata value) {
    this.mailMetadata = value;
  }

  /**
   * Creates a new MailInfo RecordBuilder.
   * @return A new MailInfo RecordBuilder
   */
  public static com.atomic.document.MailInfo.Builder newBuilder() {
    return new com.atomic.document.MailInfo.Builder();
  }

  /**
   * Creates a new MailInfo RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new MailInfo RecordBuilder
   */
  public static com.atomic.document.MailInfo.Builder newBuilder(com.atomic.document.MailInfo.Builder other) {
    if (other == null) {
      return new com.atomic.document.MailInfo.Builder();
    } else {
      return new com.atomic.document.MailInfo.Builder(other);
    }
  }

  /**
   * Creates a new MailInfo RecordBuilder by copying an existing MailInfo instance.
   * @param other The existing instance to copy.
   * @return A new MailInfo RecordBuilder
   */
  public static com.atomic.document.MailInfo.Builder newBuilder(com.atomic.document.MailInfo other) {
    if (other == null) {
      return new com.atomic.document.MailInfo.Builder();
    } else {
      return new com.atomic.document.MailInfo.Builder(other);
    }
  }

  /**
   * RecordBuilder for MailInfo instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<MailInfo>
    implements org.apache.avro.data.RecordBuilder<MailInfo> {

    private java.lang.String subject;
    private com.atomic.document.MailDefinition mailDefinition;
    private com.atomic.document.MailDefinition.Builder mailDefinitionBuilder;
    private com.atomic.document.MailMetadata mailMetadata;
    private com.atomic.document.MailMetadata.Builder mailMetadataBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.atomic.document.MailInfo.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.subject)) {
        this.subject = data().deepCopy(fields()[0].schema(), other.subject);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.mailDefinition)) {
        this.mailDefinition = data().deepCopy(fields()[1].schema(), other.mailDefinition);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (other.hasMailDefinitionBuilder()) {
        this.mailDefinitionBuilder = com.atomic.document.MailDefinition.newBuilder(other.getMailDefinitionBuilder());
      }
      if (isValidValue(fields()[2], other.mailMetadata)) {
        this.mailMetadata = data().deepCopy(fields()[2].schema(), other.mailMetadata);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (other.hasMailMetadataBuilder()) {
        this.mailMetadataBuilder = com.atomic.document.MailMetadata.newBuilder(other.getMailMetadataBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing MailInfo instance
     * @param other The existing instance to copy.
     */
    private Builder(com.atomic.document.MailInfo other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.subject)) {
        this.subject = data().deepCopy(fields()[0].schema(), other.subject);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.mailDefinition)) {
        this.mailDefinition = data().deepCopy(fields()[1].schema(), other.mailDefinition);
        fieldSetFlags()[1] = true;
      }
      this.mailDefinitionBuilder = null;
      if (isValidValue(fields()[2], other.mailMetadata)) {
        this.mailMetadata = data().deepCopy(fields()[2].schema(), other.mailMetadata);
        fieldSetFlags()[2] = true;
      }
      this.mailMetadataBuilder = null;
    }

    /**
      * Gets the value of the 'subject' field.
      * @return The value.
      */
    public java.lang.String getSubject() {
      return subject;
    }


    /**
      * Sets the value of the 'subject' field.
      * @param value The value of 'subject'.
      * @return This builder.
      */
    public com.atomic.document.MailInfo.Builder setSubject(java.lang.String value) {
      validate(fields()[0], value);
      this.subject = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'subject' field has been set.
      * @return True if the 'subject' field has been set, false otherwise.
      */
    public boolean hasSubject() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'subject' field.
      * @return This builder.
      */
    public com.atomic.document.MailInfo.Builder clearSubject() {
      subject = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'mailDefinition' field.
      * @return The value.
      */
    public com.atomic.document.MailDefinition getMailDefinition() {
      return mailDefinition;
    }


    /**
      * Sets the value of the 'mailDefinition' field.
      * @param value The value of 'mailDefinition'.
      * @return This builder.
      */
    public com.atomic.document.MailInfo.Builder setMailDefinition(com.atomic.document.MailDefinition value) {
      validate(fields()[1], value);
      this.mailDefinitionBuilder = null;
      this.mailDefinition = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'mailDefinition' field has been set.
      * @return True if the 'mailDefinition' field has been set, false otherwise.
      */
    public boolean hasMailDefinition() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'mailDefinition' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.atomic.document.MailDefinition.Builder getMailDefinitionBuilder() {
      if (mailDefinitionBuilder == null) {
        if (hasMailDefinition()) {
          setMailDefinitionBuilder(com.atomic.document.MailDefinition.newBuilder(mailDefinition));
        } else {
          setMailDefinitionBuilder(com.atomic.document.MailDefinition.newBuilder());
        }
      }
      return mailDefinitionBuilder;
    }

    /**
     * Sets the Builder instance for the 'mailDefinition' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.atomic.document.MailInfo.Builder setMailDefinitionBuilder(com.atomic.document.MailDefinition.Builder value) {
      clearMailDefinition();
      mailDefinitionBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'mailDefinition' field has an active Builder instance
     * @return True if the 'mailDefinition' field has an active Builder instance
     */
    public boolean hasMailDefinitionBuilder() {
      return mailDefinitionBuilder != null;
    }

    /**
      * Clears the value of the 'mailDefinition' field.
      * @return This builder.
      */
    public com.atomic.document.MailInfo.Builder clearMailDefinition() {
      mailDefinition = null;
      mailDefinitionBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'mailMetadata' field.
      * @return The value.
      */
    public com.atomic.document.MailMetadata getMailMetadata() {
      return mailMetadata;
    }


    /**
      * Sets the value of the 'mailMetadata' field.
      * @param value The value of 'mailMetadata'.
      * @return This builder.
      */
    public com.atomic.document.MailInfo.Builder setMailMetadata(com.atomic.document.MailMetadata value) {
      validate(fields()[2], value);
      this.mailMetadataBuilder = null;
      this.mailMetadata = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'mailMetadata' field has been set.
      * @return True if the 'mailMetadata' field has been set, false otherwise.
      */
    public boolean hasMailMetadata() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'mailMetadata' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.atomic.document.MailMetadata.Builder getMailMetadataBuilder() {
      if (mailMetadataBuilder == null) {
        if (hasMailMetadata()) {
          setMailMetadataBuilder(com.atomic.document.MailMetadata.newBuilder(mailMetadata));
        } else {
          setMailMetadataBuilder(com.atomic.document.MailMetadata.newBuilder());
        }
      }
      return mailMetadataBuilder;
    }

    /**
     * Sets the Builder instance for the 'mailMetadata' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.atomic.document.MailInfo.Builder setMailMetadataBuilder(com.atomic.document.MailMetadata.Builder value) {
      clearMailMetadata();
      mailMetadataBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'mailMetadata' field has an active Builder instance
     * @return True if the 'mailMetadata' field has an active Builder instance
     */
    public boolean hasMailMetadataBuilder() {
      return mailMetadataBuilder != null;
    }

    /**
      * Clears the value of the 'mailMetadata' field.
      * @return This builder.
      */
    public com.atomic.document.MailInfo.Builder clearMailMetadata() {
      mailMetadata = null;
      mailMetadataBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public MailInfo build() {
      try {
        MailInfo record = new MailInfo();
        record.subject = fieldSetFlags()[0] ? this.subject : (java.lang.String) defaultValue(fields()[0]);
        if (mailDefinitionBuilder != null) {
          try {
            record.mailDefinition = this.mailDefinitionBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("mailDefinition"));
            throw e;
          }
        } else {
          record.mailDefinition = fieldSetFlags()[1] ? this.mailDefinition : (com.atomic.document.MailDefinition) defaultValue(fields()[1]);
        }
        if (mailMetadataBuilder != null) {
          try {
            record.mailMetadata = this.mailMetadataBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("mailMetadata"));
            throw e;
          }
        } else {
          record.mailMetadata = fieldSetFlags()[2] ? this.mailMetadata : (com.atomic.document.MailMetadata) defaultValue(fields()[2]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<MailInfo>
    WRITER$ = (org.apache.avro.io.DatumWriter<MailInfo>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<MailInfo>
    READER$ = (org.apache.avro.io.DatumReader<MailInfo>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










