/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.atomic.document;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Container extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -2019975239584239282L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Container\",\"namespace\":\"com.atomic.document\",\"fields\":[{\"name\":\"containerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"parent_id\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"name\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"containerType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"containerMetadata\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Container> ENCODER =
      new BinaryMessageEncoder<Container>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Container> DECODER =
      new BinaryMessageDecoder<Container>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Container> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Container> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Container> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Container>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Container to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Container from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Container instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Container fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.String containerId;
  private java.lang.String parent_id;
  private java.lang.String name;
  private java.lang.String containerType;
  private java.lang.String containerMetadata;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Container() {}

  /**
   * All-args constructor.
   * @param containerId The new value for containerId
   * @param parent_id The new value for parent_id
   * @param name The new value for name
   * @param containerType The new value for containerType
   * @param containerMetadata The new value for containerMetadata
   */
  public Container(java.lang.String containerId, java.lang.String parent_id, java.lang.String name, java.lang.String containerType, java.lang.String containerMetadata) {
    this.containerId = containerId;
    this.parent_id = parent_id;
    this.name = name;
    this.containerType = containerType;
    this.containerMetadata = containerMetadata;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return containerId;
    case 1: return parent_id;
    case 2: return name;
    case 3: return containerType;
    case 4: return containerMetadata;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: containerId = value$ != null ? value$.toString() : null; break;
    case 1: parent_id = value$ != null ? value$.toString() : null; break;
    case 2: name = value$ != null ? value$.toString() : null; break;
    case 3: containerType = value$ != null ? value$.toString() : null; break;
    case 4: containerMetadata = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'containerId' field.
   * @return The value of the 'containerId' field.
   */
  public java.lang.String getContainerId() {
    return containerId;
  }


  /**
   * Sets the value of the 'containerId' field.
   * @param value the value to set.
   */
  public void setContainerId(java.lang.String value) {
    this.containerId = value;
  }

  /**
   * Gets the value of the 'parent_id' field.
   * @return The value of the 'parent_id' field.
   */
  public java.lang.String getParentId() {
    return parent_id;
  }


  /**
   * Sets the value of the 'parent_id' field.
   * @param value the value to set.
   */
  public void setParentId(java.lang.String value) {
    this.parent_id = value;
  }

  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public java.lang.String getName() {
    return name;
  }


  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.String value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'containerType' field.
   * @return The value of the 'containerType' field.
   */
  public java.lang.String getContainerType() {
    return containerType;
  }


  /**
   * Sets the value of the 'containerType' field.
   * @param value the value to set.
   */
  public void setContainerType(java.lang.String value) {
    this.containerType = value;
  }

  /**
   * Gets the value of the 'containerMetadata' field.
   * @return The value of the 'containerMetadata' field.
   */
  public java.lang.String getContainerMetadata() {
    return containerMetadata;
  }


  /**
   * Sets the value of the 'containerMetadata' field.
   * @param value the value to set.
   */
  public void setContainerMetadata(java.lang.String value) {
    this.containerMetadata = value;
  }

  /**
   * Creates a new Container RecordBuilder.
   * @return A new Container RecordBuilder
   */
  public static com.atomic.document.Container.Builder newBuilder() {
    return new com.atomic.document.Container.Builder();
  }

  /**
   * Creates a new Container RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Container RecordBuilder
   */
  public static com.atomic.document.Container.Builder newBuilder(com.atomic.document.Container.Builder other) {
    if (other == null) {
      return new com.atomic.document.Container.Builder();
    } else {
      return new com.atomic.document.Container.Builder(other);
    }
  }

  /**
   * Creates a new Container RecordBuilder by copying an existing Container instance.
   * @param other The existing instance to copy.
   * @return A new Container RecordBuilder
   */
  public static com.atomic.document.Container.Builder newBuilder(com.atomic.document.Container other) {
    if (other == null) {
      return new com.atomic.document.Container.Builder();
    } else {
      return new com.atomic.document.Container.Builder(other);
    }
  }

  /**
   * RecordBuilder for Container instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Container>
    implements org.apache.avro.data.RecordBuilder<Container> {

    private java.lang.String containerId;
    private java.lang.String parent_id;
    private java.lang.String name;
    private java.lang.String containerType;
    private java.lang.String containerMetadata;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.atomic.document.Container.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.containerId)) {
        this.containerId = data().deepCopy(fields()[0].schema(), other.containerId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.parent_id)) {
        this.parent_id = data().deepCopy(fields()[1].schema(), other.parent_id);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.name)) {
        this.name = data().deepCopy(fields()[2].schema(), other.name);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.containerType)) {
        this.containerType = data().deepCopy(fields()[3].schema(), other.containerType);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.containerMetadata)) {
        this.containerMetadata = data().deepCopy(fields()[4].schema(), other.containerMetadata);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing Container instance
     * @param other The existing instance to copy.
     */
    private Builder(com.atomic.document.Container other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.containerId)) {
        this.containerId = data().deepCopy(fields()[0].schema(), other.containerId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.parent_id)) {
        this.parent_id = data().deepCopy(fields()[1].schema(), other.parent_id);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.name)) {
        this.name = data().deepCopy(fields()[2].schema(), other.name);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.containerType)) {
        this.containerType = data().deepCopy(fields()[3].schema(), other.containerType);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.containerMetadata)) {
        this.containerMetadata = data().deepCopy(fields()[4].schema(), other.containerMetadata);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'containerId' field.
      * @return The value.
      */
    public java.lang.String getContainerId() {
      return containerId;
    }


    /**
      * Sets the value of the 'containerId' field.
      * @param value The value of 'containerId'.
      * @return This builder.
      */
    public com.atomic.document.Container.Builder setContainerId(java.lang.String value) {
      validate(fields()[0], value);
      this.containerId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'containerId' field has been set.
      * @return True if the 'containerId' field has been set, false otherwise.
      */
    public boolean hasContainerId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'containerId' field.
      * @return This builder.
      */
    public com.atomic.document.Container.Builder clearContainerId() {
      containerId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'parent_id' field.
      * @return The value.
      */
    public java.lang.String getParentId() {
      return parent_id;
    }


    /**
      * Sets the value of the 'parent_id' field.
      * @param value The value of 'parent_id'.
      * @return This builder.
      */
    public com.atomic.document.Container.Builder setParentId(java.lang.String value) {
      validate(fields()[1], value);
      this.parent_id = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'parent_id' field has been set.
      * @return True if the 'parent_id' field has been set, false otherwise.
      */
    public boolean hasParentId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'parent_id' field.
      * @return This builder.
      */
    public com.atomic.document.Container.Builder clearParentId() {
      parent_id = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public java.lang.String getName() {
      return name;
    }


    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public com.atomic.document.Container.Builder setName(java.lang.String value) {
      validate(fields()[2], value);
      this.name = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public com.atomic.document.Container.Builder clearName() {
      name = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'containerType' field.
      * @return The value.
      */
    public java.lang.String getContainerType() {
      return containerType;
    }


    /**
      * Sets the value of the 'containerType' field.
      * @param value The value of 'containerType'.
      * @return This builder.
      */
    public com.atomic.document.Container.Builder setContainerType(java.lang.String value) {
      validate(fields()[3], value);
      this.containerType = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'containerType' field has been set.
      * @return True if the 'containerType' field has been set, false otherwise.
      */
    public boolean hasContainerType() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'containerType' field.
      * @return This builder.
      */
    public com.atomic.document.Container.Builder clearContainerType() {
      containerType = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'containerMetadata' field.
      * @return The value.
      */
    public java.lang.String getContainerMetadata() {
      return containerMetadata;
    }


    /**
      * Sets the value of the 'containerMetadata' field.
      * @param value The value of 'containerMetadata'.
      * @return This builder.
      */
    public com.atomic.document.Container.Builder setContainerMetadata(java.lang.String value) {
      validate(fields()[4], value);
      this.containerMetadata = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'containerMetadata' field has been set.
      * @return True if the 'containerMetadata' field has been set, false otherwise.
      */
    public boolean hasContainerMetadata() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'containerMetadata' field.
      * @return This builder.
      */
    public com.atomic.document.Container.Builder clearContainerMetadata() {
      containerMetadata = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Container build() {
      try {
        Container record = new Container();
        record.containerId = fieldSetFlags()[0] ? this.containerId : (java.lang.String) defaultValue(fields()[0]);
        record.parent_id = fieldSetFlags()[1] ? this.parent_id : (java.lang.String) defaultValue(fields()[1]);
        record.name = fieldSetFlags()[2] ? this.name : (java.lang.String) defaultValue(fields()[2]);
        record.containerType = fieldSetFlags()[3] ? this.containerType : (java.lang.String) defaultValue(fields()[3]);
        record.containerMetadata = fieldSetFlags()[4] ? this.containerMetadata : (java.lang.String) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Container>
    WRITER$ = (org.apache.avro.io.DatumWriter<Container>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Container>
    READER$ = (org.apache.avro.io.DatumReader<Container>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.containerId);

    if (this.parent_id == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.parent_id);
    }

    if (this.name == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.name);
    }

    if (this.containerType == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.containerType);
    }

    if (this.containerMetadata == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.containerMetadata);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.containerId = in.readString();

      if (in.readIndex() != 1) {
        in.readNull();
        this.parent_id = null;
      } else {
        this.parent_id = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.name = null;
      } else {
        this.name = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.containerType = null;
      } else {
        this.containerType = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.containerMetadata = null;
      } else {
        this.containerMetadata = in.readString();
      }

    } else {
      for (int i = 0; i < 5; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.containerId = in.readString();
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.parent_id = null;
          } else {
            this.parent_id = in.readString();
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.name = null;
          } else {
            this.name = in.readString();
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.containerType = null;
          } else {
            this.containerType = in.readString();
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.containerMetadata = null;
          } else {
            this.containerMetadata = in.readString();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










