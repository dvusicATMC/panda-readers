/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.atomic.document;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class OcrInfo extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7124042321322766025L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"OcrInfo\",\"namespace\":\"com.atomic.document\",\"fields\":[{\"name\":\"boundingBoxSpans\",\"type\":[\"null\",{\"type\":\"array\",\"items\":[\"null\",{\"type\":\"record\",\"name\":\"BoundingBoxSpan\",\"fields\":[{\"name\":\"bounding_box\",\"type\":[\"null\",{\"type\":\"array\",\"items\":[\"null\",{\"type\":\"array\",\"items\":[\"null\",\"int\"]}]}],\"default\":null},{\"name\":\"end\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"start\",\"type\":[\"null\",\"int\"],\"default\":null}]}]}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<OcrInfo> ENCODER =
      new BinaryMessageEncoder<OcrInfo>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<OcrInfo> DECODER =
      new BinaryMessageDecoder<OcrInfo>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<OcrInfo> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<OcrInfo> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<OcrInfo> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<OcrInfo>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this OcrInfo to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a OcrInfo from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a OcrInfo instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static OcrInfo fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.util.List<com.atomic.document.BoundingBoxSpan> boundingBoxSpans;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public OcrInfo() {}

  /**
   * All-args constructor.
   * @param boundingBoxSpans The new value for boundingBoxSpans
   */
  public OcrInfo(java.util.List<com.atomic.document.BoundingBoxSpan> boundingBoxSpans) {
    this.boundingBoxSpans = boundingBoxSpans;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return boundingBoxSpans;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: boundingBoxSpans = (java.util.List<com.atomic.document.BoundingBoxSpan>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'boundingBoxSpans' field.
   * @return The value of the 'boundingBoxSpans' field.
   */
  public java.util.List<com.atomic.document.BoundingBoxSpan> getBoundingBoxSpans() {
    return boundingBoxSpans;
  }


  /**
   * Sets the value of the 'boundingBoxSpans' field.
   * @param value the value to set.
   */
  public void setBoundingBoxSpans(java.util.List<com.atomic.document.BoundingBoxSpan> value) {
    this.boundingBoxSpans = value;
  }

  /**
   * Creates a new OcrInfo RecordBuilder.
   * @return A new OcrInfo RecordBuilder
   */
  public static com.atomic.document.OcrInfo.Builder newBuilder() {
    return new com.atomic.document.OcrInfo.Builder();
  }

  /**
   * Creates a new OcrInfo RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new OcrInfo RecordBuilder
   */
  public static com.atomic.document.OcrInfo.Builder newBuilder(com.atomic.document.OcrInfo.Builder other) {
    if (other == null) {
      return new com.atomic.document.OcrInfo.Builder();
    } else {
      return new com.atomic.document.OcrInfo.Builder(other);
    }
  }

  /**
   * Creates a new OcrInfo RecordBuilder by copying an existing OcrInfo instance.
   * @param other The existing instance to copy.
   * @return A new OcrInfo RecordBuilder
   */
  public static com.atomic.document.OcrInfo.Builder newBuilder(com.atomic.document.OcrInfo other) {
    if (other == null) {
      return new com.atomic.document.OcrInfo.Builder();
    } else {
      return new com.atomic.document.OcrInfo.Builder(other);
    }
  }

  /**
   * RecordBuilder for OcrInfo instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<OcrInfo>
    implements org.apache.avro.data.RecordBuilder<OcrInfo> {

    private java.util.List<com.atomic.document.BoundingBoxSpan> boundingBoxSpans;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.atomic.document.OcrInfo.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.boundingBoxSpans)) {
        this.boundingBoxSpans = data().deepCopy(fields()[0].schema(), other.boundingBoxSpans);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
    }

    /**
     * Creates a Builder by copying an existing OcrInfo instance
     * @param other The existing instance to copy.
     */
    private Builder(com.atomic.document.OcrInfo other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.boundingBoxSpans)) {
        this.boundingBoxSpans = data().deepCopy(fields()[0].schema(), other.boundingBoxSpans);
        fieldSetFlags()[0] = true;
      }
    }

    /**
      * Gets the value of the 'boundingBoxSpans' field.
      * @return The value.
      */
    public java.util.List<com.atomic.document.BoundingBoxSpan> getBoundingBoxSpans() {
      return boundingBoxSpans;
    }


    /**
      * Sets the value of the 'boundingBoxSpans' field.
      * @param value The value of 'boundingBoxSpans'.
      * @return This builder.
      */
    public com.atomic.document.OcrInfo.Builder setBoundingBoxSpans(java.util.List<com.atomic.document.BoundingBoxSpan> value) {
      validate(fields()[0], value);
      this.boundingBoxSpans = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'boundingBoxSpans' field has been set.
      * @return True if the 'boundingBoxSpans' field has been set, false otherwise.
      */
    public boolean hasBoundingBoxSpans() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'boundingBoxSpans' field.
      * @return This builder.
      */
    public com.atomic.document.OcrInfo.Builder clearBoundingBoxSpans() {
      boundingBoxSpans = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public OcrInfo build() {
      try {
        OcrInfo record = new OcrInfo();
        record.boundingBoxSpans = fieldSetFlags()[0] ? this.boundingBoxSpans : (java.util.List<com.atomic.document.BoundingBoxSpan>) defaultValue(fields()[0]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<OcrInfo>
    WRITER$ = (org.apache.avro.io.DatumWriter<OcrInfo>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<OcrInfo>
    READER$ = (org.apache.avro.io.DatumReader<OcrInfo>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.boundingBoxSpans == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size0 = this.boundingBoxSpans.size();
      out.writeArrayStart();
      out.setItemCount(size0);
      long actualSize0 = 0;
      for (com.atomic.document.BoundingBoxSpan e0: this.boundingBoxSpans) {
        actualSize0++;
        out.startItem();
        if (e0 == null) {
          out.writeIndex(0);
          out.writeNull();
        } else {
          out.writeIndex(1);
          e0.customEncode(out);
        }
      }
      out.writeArrayEnd();
      if (actualSize0 != size0)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.boundingBoxSpans = null;
      } else {
        long size0 = in.readArrayStart();
        java.util.List<com.atomic.document.BoundingBoxSpan> a0 = this.boundingBoxSpans;
        if (a0 == null) {
          a0 = new SpecificData.Array<com.atomic.document.BoundingBoxSpan>((int)size0, SCHEMA$.getField("boundingBoxSpans").schema().getTypes().get(1));
          this.boundingBoxSpans = a0;
        } else a0.clear();
        SpecificData.Array<com.atomic.document.BoundingBoxSpan> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<com.atomic.document.BoundingBoxSpan>)a0 : null);
        for ( ; 0 < size0; size0 = in.arrayNext()) {
          for ( ; size0 != 0; size0--) {
            com.atomic.document.BoundingBoxSpan e0 = (ga0 != null ? ga0.peek() : null);
            if (in.readIndex() != 1) {
              in.readNull();
              e0 = null;
            } else {
              if (e0 == null) {
                e0 = new com.atomic.document.BoundingBoxSpan();
              }
              e0.customDecode(in);
            }
            a0.add(e0);
          }
        }
      }

    } else {
      for (int i = 0; i < 1; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.boundingBoxSpans = null;
          } else {
            long size0 = in.readArrayStart();
            java.util.List<com.atomic.document.BoundingBoxSpan> a0 = this.boundingBoxSpans;
            if (a0 == null) {
              a0 = new SpecificData.Array<com.atomic.document.BoundingBoxSpan>((int)size0, SCHEMA$.getField("boundingBoxSpans").schema().getTypes().get(1));
              this.boundingBoxSpans = a0;
            } else a0.clear();
            SpecificData.Array<com.atomic.document.BoundingBoxSpan> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<com.atomic.document.BoundingBoxSpan>)a0 : null);
            for ( ; 0 < size0; size0 = in.arrayNext()) {
              for ( ; size0 != 0; size0--) {
                com.atomic.document.BoundingBoxSpan e0 = (ga0 != null ? ga0.peek() : null);
                if (in.readIndex() != 1) {
                  in.readNull();
                  e0 = null;
                } else {
                  if (e0 == null) {
                    e0 = new com.atomic.document.BoundingBoxSpan();
                  }
                  e0.customDecode(in);
                }
                a0.add(e0);
              }
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










