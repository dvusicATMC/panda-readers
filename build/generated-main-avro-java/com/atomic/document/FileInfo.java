/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.atomic.document;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class FileInfo extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6716451943133241446L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"FileInfo\",\"namespace\":\"com.atomic.document\",\"fields\":[{\"name\":\"fileName\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"fileDefinition\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"FileDefinition\",\"fields\":[{\"name\":\"timestampCreated\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"doc\":\"File timestamp created from java BasicFileAttributes. When moving file from one folder to another on OS this property will be changed, while documentDateCreated stays same!\"},{\"name\":\"extension\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}]},{\"name\":\"fileMetadata\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"FileMetadata\",\"fields\":[{\"name\":\"filePath\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"size\",\"type\":[\"null\",\"long\"]},{\"name\":\"timestampModified\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"doc\":\"File timestamp modified from java BasicFileAttributes.\"},{\"name\":\"timestampLastAccess\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"doc\":\"File timestamp of last access.\"},{\"name\":\"isSystem\",\"type\":[\"null\",\"boolean\"]},{\"name\":\"isArchive\",\"type\":[\"null\",\"boolean\"]},{\"name\":\"isHidden\",\"type\":[\"null\",\"boolean\"]},{\"name\":\"isReadOnly\",\"type\":[\"null\",\"boolean\"]}]}]},{\"name\":\"security\",\"type\":{\"type\":\"record\",\"name\":\"Security\",\"fields\":[{\"name\":\"owner\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"group\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"permission\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
  }

  private static final BinaryMessageEncoder<FileInfo> ENCODER =
      new BinaryMessageEncoder<FileInfo>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<FileInfo> DECODER =
      new BinaryMessageDecoder<FileInfo>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<FileInfo> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<FileInfo> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<FileInfo> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<FileInfo>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this FileInfo to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a FileInfo from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a FileInfo instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static FileInfo fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.String fileName;
  private com.atomic.document.FileDefinition fileDefinition;
  private com.atomic.document.FileMetadata fileMetadata;
  private com.atomic.document.Security security;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public FileInfo() {}

  /**
   * All-args constructor.
   * @param fileName The new value for fileName
   * @param fileDefinition The new value for fileDefinition
   * @param fileMetadata The new value for fileMetadata
   * @param security The new value for security
   */
  public FileInfo(java.lang.String fileName, com.atomic.document.FileDefinition fileDefinition, com.atomic.document.FileMetadata fileMetadata, com.atomic.document.Security security) {
    this.fileName = fileName;
    this.fileDefinition = fileDefinition;
    this.fileMetadata = fileMetadata;
    this.security = security;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return fileName;
    case 1: return fileDefinition;
    case 2: return fileMetadata;
    case 3: return security;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: fileName = value$ != null ? value$.toString() : null; break;
    case 1: fileDefinition = (com.atomic.document.FileDefinition)value$; break;
    case 2: fileMetadata = (com.atomic.document.FileMetadata)value$; break;
    case 3: security = (com.atomic.document.Security)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'fileName' field.
   * @return The value of the 'fileName' field.
   */
  public java.lang.String getFileName() {
    return fileName;
  }


  /**
   * Sets the value of the 'fileName' field.
   * @param value the value to set.
   */
  public void setFileName(java.lang.String value) {
    this.fileName = value;
  }

  /**
   * Gets the value of the 'fileDefinition' field.
   * @return The value of the 'fileDefinition' field.
   */
  public com.atomic.document.FileDefinition getFileDefinition() {
    return fileDefinition;
  }


  /**
   * Sets the value of the 'fileDefinition' field.
   * @param value the value to set.
   */
  public void setFileDefinition(com.atomic.document.FileDefinition value) {
    this.fileDefinition = value;
  }

  /**
   * Gets the value of the 'fileMetadata' field.
   * @return The value of the 'fileMetadata' field.
   */
  public com.atomic.document.FileMetadata getFileMetadata() {
    return fileMetadata;
  }


  /**
   * Sets the value of the 'fileMetadata' field.
   * @param value the value to set.
   */
  public void setFileMetadata(com.atomic.document.FileMetadata value) {
    this.fileMetadata = value;
  }

  /**
   * Gets the value of the 'security' field.
   * @return The value of the 'security' field.
   */
  public com.atomic.document.Security getSecurity() {
    return security;
  }


  /**
   * Sets the value of the 'security' field.
   * @param value the value to set.
   */
  public void setSecurity(com.atomic.document.Security value) {
    this.security = value;
  }

  /**
   * Creates a new FileInfo RecordBuilder.
   * @return A new FileInfo RecordBuilder
   */
  public static com.atomic.document.FileInfo.Builder newBuilder() {
    return new com.atomic.document.FileInfo.Builder();
  }

  /**
   * Creates a new FileInfo RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new FileInfo RecordBuilder
   */
  public static com.atomic.document.FileInfo.Builder newBuilder(com.atomic.document.FileInfo.Builder other) {
    if (other == null) {
      return new com.atomic.document.FileInfo.Builder();
    } else {
      return new com.atomic.document.FileInfo.Builder(other);
    }
  }

  /**
   * Creates a new FileInfo RecordBuilder by copying an existing FileInfo instance.
   * @param other The existing instance to copy.
   * @return A new FileInfo RecordBuilder
   */
  public static com.atomic.document.FileInfo.Builder newBuilder(com.atomic.document.FileInfo other) {
    if (other == null) {
      return new com.atomic.document.FileInfo.Builder();
    } else {
      return new com.atomic.document.FileInfo.Builder(other);
    }
  }

  /**
   * RecordBuilder for FileInfo instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<FileInfo>
    implements org.apache.avro.data.RecordBuilder<FileInfo> {

    private java.lang.String fileName;
    private com.atomic.document.FileDefinition fileDefinition;
    private com.atomic.document.FileDefinition.Builder fileDefinitionBuilder;
    private com.atomic.document.FileMetadata fileMetadata;
    private com.atomic.document.FileMetadata.Builder fileMetadataBuilder;
    private com.atomic.document.Security security;
    private com.atomic.document.Security.Builder securityBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.atomic.document.FileInfo.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.fileName)) {
        this.fileName = data().deepCopy(fields()[0].schema(), other.fileName);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.fileDefinition)) {
        this.fileDefinition = data().deepCopy(fields()[1].schema(), other.fileDefinition);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (other.hasFileDefinitionBuilder()) {
        this.fileDefinitionBuilder = com.atomic.document.FileDefinition.newBuilder(other.getFileDefinitionBuilder());
      }
      if (isValidValue(fields()[2], other.fileMetadata)) {
        this.fileMetadata = data().deepCopy(fields()[2].schema(), other.fileMetadata);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (other.hasFileMetadataBuilder()) {
        this.fileMetadataBuilder = com.atomic.document.FileMetadata.newBuilder(other.getFileMetadataBuilder());
      }
      if (isValidValue(fields()[3], other.security)) {
        this.security = data().deepCopy(fields()[3].schema(), other.security);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (other.hasSecurityBuilder()) {
        this.securityBuilder = com.atomic.document.Security.newBuilder(other.getSecurityBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing FileInfo instance
     * @param other The existing instance to copy.
     */
    private Builder(com.atomic.document.FileInfo other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.fileName)) {
        this.fileName = data().deepCopy(fields()[0].schema(), other.fileName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.fileDefinition)) {
        this.fileDefinition = data().deepCopy(fields()[1].schema(), other.fileDefinition);
        fieldSetFlags()[1] = true;
      }
      this.fileDefinitionBuilder = null;
      if (isValidValue(fields()[2], other.fileMetadata)) {
        this.fileMetadata = data().deepCopy(fields()[2].schema(), other.fileMetadata);
        fieldSetFlags()[2] = true;
      }
      this.fileMetadataBuilder = null;
      if (isValidValue(fields()[3], other.security)) {
        this.security = data().deepCopy(fields()[3].schema(), other.security);
        fieldSetFlags()[3] = true;
      }
      this.securityBuilder = null;
    }

    /**
      * Gets the value of the 'fileName' field.
      * @return The value.
      */
    public java.lang.String getFileName() {
      return fileName;
    }


    /**
      * Sets the value of the 'fileName' field.
      * @param value The value of 'fileName'.
      * @return This builder.
      */
    public com.atomic.document.FileInfo.Builder setFileName(java.lang.String value) {
      validate(fields()[0], value);
      this.fileName = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'fileName' field has been set.
      * @return True if the 'fileName' field has been set, false otherwise.
      */
    public boolean hasFileName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'fileName' field.
      * @return This builder.
      */
    public com.atomic.document.FileInfo.Builder clearFileName() {
      fileName = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'fileDefinition' field.
      * @return The value.
      */
    public com.atomic.document.FileDefinition getFileDefinition() {
      return fileDefinition;
    }


    /**
      * Sets the value of the 'fileDefinition' field.
      * @param value The value of 'fileDefinition'.
      * @return This builder.
      */
    public com.atomic.document.FileInfo.Builder setFileDefinition(com.atomic.document.FileDefinition value) {
      validate(fields()[1], value);
      this.fileDefinitionBuilder = null;
      this.fileDefinition = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'fileDefinition' field has been set.
      * @return True if the 'fileDefinition' field has been set, false otherwise.
      */
    public boolean hasFileDefinition() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'fileDefinition' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.atomic.document.FileDefinition.Builder getFileDefinitionBuilder() {
      if (fileDefinitionBuilder == null) {
        if (hasFileDefinition()) {
          setFileDefinitionBuilder(com.atomic.document.FileDefinition.newBuilder(fileDefinition));
        } else {
          setFileDefinitionBuilder(com.atomic.document.FileDefinition.newBuilder());
        }
      }
      return fileDefinitionBuilder;
    }

    /**
     * Sets the Builder instance for the 'fileDefinition' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.atomic.document.FileInfo.Builder setFileDefinitionBuilder(com.atomic.document.FileDefinition.Builder value) {
      clearFileDefinition();
      fileDefinitionBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'fileDefinition' field has an active Builder instance
     * @return True if the 'fileDefinition' field has an active Builder instance
     */
    public boolean hasFileDefinitionBuilder() {
      return fileDefinitionBuilder != null;
    }

    /**
      * Clears the value of the 'fileDefinition' field.
      * @return This builder.
      */
    public com.atomic.document.FileInfo.Builder clearFileDefinition() {
      fileDefinition = null;
      fileDefinitionBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'fileMetadata' field.
      * @return The value.
      */
    public com.atomic.document.FileMetadata getFileMetadata() {
      return fileMetadata;
    }


    /**
      * Sets the value of the 'fileMetadata' field.
      * @param value The value of 'fileMetadata'.
      * @return This builder.
      */
    public com.atomic.document.FileInfo.Builder setFileMetadata(com.atomic.document.FileMetadata value) {
      validate(fields()[2], value);
      this.fileMetadataBuilder = null;
      this.fileMetadata = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'fileMetadata' field has been set.
      * @return True if the 'fileMetadata' field has been set, false otherwise.
      */
    public boolean hasFileMetadata() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'fileMetadata' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.atomic.document.FileMetadata.Builder getFileMetadataBuilder() {
      if (fileMetadataBuilder == null) {
        if (hasFileMetadata()) {
          setFileMetadataBuilder(com.atomic.document.FileMetadata.newBuilder(fileMetadata));
        } else {
          setFileMetadataBuilder(com.atomic.document.FileMetadata.newBuilder());
        }
      }
      return fileMetadataBuilder;
    }

    /**
     * Sets the Builder instance for the 'fileMetadata' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.atomic.document.FileInfo.Builder setFileMetadataBuilder(com.atomic.document.FileMetadata.Builder value) {
      clearFileMetadata();
      fileMetadataBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'fileMetadata' field has an active Builder instance
     * @return True if the 'fileMetadata' field has an active Builder instance
     */
    public boolean hasFileMetadataBuilder() {
      return fileMetadataBuilder != null;
    }

    /**
      * Clears the value of the 'fileMetadata' field.
      * @return This builder.
      */
    public com.atomic.document.FileInfo.Builder clearFileMetadata() {
      fileMetadata = null;
      fileMetadataBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'security' field.
      * @return The value.
      */
    public com.atomic.document.Security getSecurity() {
      return security;
    }


    /**
      * Sets the value of the 'security' field.
      * @param value The value of 'security'.
      * @return This builder.
      */
    public com.atomic.document.FileInfo.Builder setSecurity(com.atomic.document.Security value) {
      validate(fields()[3], value);
      this.securityBuilder = null;
      this.security = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'security' field has been set.
      * @return True if the 'security' field has been set, false otherwise.
      */
    public boolean hasSecurity() {
      return fieldSetFlags()[3];
    }

    /**
     * Gets the Builder instance for the 'security' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.atomic.document.Security.Builder getSecurityBuilder() {
      if (securityBuilder == null) {
        if (hasSecurity()) {
          setSecurityBuilder(com.atomic.document.Security.newBuilder(security));
        } else {
          setSecurityBuilder(com.atomic.document.Security.newBuilder());
        }
      }
      return securityBuilder;
    }

    /**
     * Sets the Builder instance for the 'security' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.atomic.document.FileInfo.Builder setSecurityBuilder(com.atomic.document.Security.Builder value) {
      clearSecurity();
      securityBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'security' field has an active Builder instance
     * @return True if the 'security' field has an active Builder instance
     */
    public boolean hasSecurityBuilder() {
      return securityBuilder != null;
    }

    /**
      * Clears the value of the 'security' field.
      * @return This builder.
      */
    public com.atomic.document.FileInfo.Builder clearSecurity() {
      security = null;
      securityBuilder = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public FileInfo build() {
      try {
        FileInfo record = new FileInfo();
        record.fileName = fieldSetFlags()[0] ? this.fileName : (java.lang.String) defaultValue(fields()[0]);
        if (fileDefinitionBuilder != null) {
          try {
            record.fileDefinition = this.fileDefinitionBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("fileDefinition"));
            throw e;
          }
        } else {
          record.fileDefinition = fieldSetFlags()[1] ? this.fileDefinition : (com.atomic.document.FileDefinition) defaultValue(fields()[1]);
        }
        if (fileMetadataBuilder != null) {
          try {
            record.fileMetadata = this.fileMetadataBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("fileMetadata"));
            throw e;
          }
        } else {
          record.fileMetadata = fieldSetFlags()[2] ? this.fileMetadata : (com.atomic.document.FileMetadata) defaultValue(fields()[2]);
        }
        if (securityBuilder != null) {
          try {
            record.security = this.securityBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("security"));
            throw e;
          }
        } else {
          record.security = fieldSetFlags()[3] ? this.security : (com.atomic.document.Security) defaultValue(fields()[3]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<FileInfo>
    WRITER$ = (org.apache.avro.io.DatumWriter<FileInfo>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<FileInfo>
    READER$ = (org.apache.avro.io.DatumReader<FileInfo>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










