/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.atomic.document;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class FileMetadata extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3919607423795914490L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"FileMetadata\",\"namespace\":\"com.atomic.document\",\"fields\":[{\"name\":\"filePath\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"size\",\"type\":[\"null\",\"long\"]},{\"name\":\"timestampModified\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"doc\":\"File timestamp modified from java BasicFileAttributes.\"},{\"name\":\"timestampLastAccess\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"doc\":\"File timestamp of last access.\"},{\"name\":\"isSystem\",\"type\":[\"null\",\"boolean\"]},{\"name\":\"isArchive\",\"type\":[\"null\",\"boolean\"]},{\"name\":\"isHidden\",\"type\":[\"null\",\"boolean\"]},{\"name\":\"isReadOnly\",\"type\":[\"null\",\"boolean\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
  }

  private static final BinaryMessageEncoder<FileMetadata> ENCODER =
      new BinaryMessageEncoder<FileMetadata>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<FileMetadata> DECODER =
      new BinaryMessageDecoder<FileMetadata>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<FileMetadata> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<FileMetadata> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<FileMetadata> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<FileMetadata>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this FileMetadata to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a FileMetadata from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a FileMetadata instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static FileMetadata fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.String filePath;
  private java.lang.Long size;
  /** File timestamp modified from java BasicFileAttributes. */
  private java.time.Instant timestampModified;
  /** File timestamp of last access. */
  private java.time.Instant timestampLastAccess;
  private java.lang.Boolean isSystem;
  private java.lang.Boolean isArchive;
  private java.lang.Boolean isHidden;
  private java.lang.Boolean isReadOnly;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public FileMetadata() {}

  /**
   * All-args constructor.
   * @param filePath The new value for filePath
   * @param size The new value for size
   * @param timestampModified File timestamp modified from java BasicFileAttributes.
   * @param timestampLastAccess File timestamp of last access.
   * @param isSystem The new value for isSystem
   * @param isArchive The new value for isArchive
   * @param isHidden The new value for isHidden
   * @param isReadOnly The new value for isReadOnly
   */
  public FileMetadata(java.lang.String filePath, java.lang.Long size, java.time.Instant timestampModified, java.time.Instant timestampLastAccess, java.lang.Boolean isSystem, java.lang.Boolean isArchive, java.lang.Boolean isHidden, java.lang.Boolean isReadOnly) {
    this.filePath = filePath;
    this.size = size;
    this.timestampModified = timestampModified;
    this.timestampLastAccess = timestampLastAccess;
    this.isSystem = isSystem;
    this.isArchive = isArchive;
    this.isHidden = isHidden;
    this.isReadOnly = isReadOnly;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return filePath;
    case 1: return size;
    case 2: return timestampModified;
    case 3: return timestampLastAccess;
    case 4: return isSystem;
    case 5: return isArchive;
    case 6: return isHidden;
    case 7: return isReadOnly;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: filePath = value$ != null ? value$.toString() : null; break;
    case 1: size = (java.lang.Long)value$; break;
    case 2: timestampModified = (java.time.Instant)value$; break;
    case 3: timestampLastAccess = (java.time.Instant)value$; break;
    case 4: isSystem = (java.lang.Boolean)value$; break;
    case 5: isArchive = (java.lang.Boolean)value$; break;
    case 6: isHidden = (java.lang.Boolean)value$; break;
    case 7: isReadOnly = (java.lang.Boolean)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'filePath' field.
   * @return The value of the 'filePath' field.
   */
  public java.lang.String getFilePath() {
    return filePath;
  }


  /**
   * Sets the value of the 'filePath' field.
   * @param value the value to set.
   */
  public void setFilePath(java.lang.String value) {
    this.filePath = value;
  }

  /**
   * Gets the value of the 'size' field.
   * @return The value of the 'size' field.
   */
  public java.lang.Long getSize() {
    return size;
  }


  /**
   * Sets the value of the 'size' field.
   * @param value the value to set.
   */
  public void setSize(java.lang.Long value) {
    this.size = value;
  }

  /**
   * Gets the value of the 'timestampModified' field.
   * @return File timestamp modified from java BasicFileAttributes.
   */
  public java.time.Instant getTimestampModified() {
    return timestampModified;
  }


  /**
   * Sets the value of the 'timestampModified' field.
   * File timestamp modified from java BasicFileAttributes.
   * @param value the value to set.
   */
  public void setTimestampModified(java.time.Instant value) {
    this.timestampModified = value;
  }

  /**
   * Gets the value of the 'timestampLastAccess' field.
   * @return File timestamp of last access.
   */
  public java.time.Instant getTimestampLastAccess() {
    return timestampLastAccess;
  }


  /**
   * Sets the value of the 'timestampLastAccess' field.
   * File timestamp of last access.
   * @param value the value to set.
   */
  public void setTimestampLastAccess(java.time.Instant value) {
    this.timestampLastAccess = value;
  }

  /**
   * Gets the value of the 'isSystem' field.
   * @return The value of the 'isSystem' field.
   */
  public java.lang.Boolean getIsSystem() {
    return isSystem;
  }


  /**
   * Sets the value of the 'isSystem' field.
   * @param value the value to set.
   */
  public void setIsSystem(java.lang.Boolean value) {
    this.isSystem = value;
  }

  /**
   * Gets the value of the 'isArchive' field.
   * @return The value of the 'isArchive' field.
   */
  public java.lang.Boolean getIsArchive() {
    return isArchive;
  }


  /**
   * Sets the value of the 'isArchive' field.
   * @param value the value to set.
   */
  public void setIsArchive(java.lang.Boolean value) {
    this.isArchive = value;
  }

  /**
   * Gets the value of the 'isHidden' field.
   * @return The value of the 'isHidden' field.
   */
  public java.lang.Boolean getIsHidden() {
    return isHidden;
  }


  /**
   * Sets the value of the 'isHidden' field.
   * @param value the value to set.
   */
  public void setIsHidden(java.lang.Boolean value) {
    this.isHidden = value;
  }

  /**
   * Gets the value of the 'isReadOnly' field.
   * @return The value of the 'isReadOnly' field.
   */
  public java.lang.Boolean getIsReadOnly() {
    return isReadOnly;
  }


  /**
   * Sets the value of the 'isReadOnly' field.
   * @param value the value to set.
   */
  public void setIsReadOnly(java.lang.Boolean value) {
    this.isReadOnly = value;
  }

  /**
   * Creates a new FileMetadata RecordBuilder.
   * @return A new FileMetadata RecordBuilder
   */
  public static com.atomic.document.FileMetadata.Builder newBuilder() {
    return new com.atomic.document.FileMetadata.Builder();
  }

  /**
   * Creates a new FileMetadata RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new FileMetadata RecordBuilder
   */
  public static com.atomic.document.FileMetadata.Builder newBuilder(com.atomic.document.FileMetadata.Builder other) {
    if (other == null) {
      return new com.atomic.document.FileMetadata.Builder();
    } else {
      return new com.atomic.document.FileMetadata.Builder(other);
    }
  }

  /**
   * Creates a new FileMetadata RecordBuilder by copying an existing FileMetadata instance.
   * @param other The existing instance to copy.
   * @return A new FileMetadata RecordBuilder
   */
  public static com.atomic.document.FileMetadata.Builder newBuilder(com.atomic.document.FileMetadata other) {
    if (other == null) {
      return new com.atomic.document.FileMetadata.Builder();
    } else {
      return new com.atomic.document.FileMetadata.Builder(other);
    }
  }

  /**
   * RecordBuilder for FileMetadata instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<FileMetadata>
    implements org.apache.avro.data.RecordBuilder<FileMetadata> {

    private java.lang.String filePath;
    private java.lang.Long size;
    /** File timestamp modified from java BasicFileAttributes. */
    private java.time.Instant timestampModified;
    /** File timestamp of last access. */
    private java.time.Instant timestampLastAccess;
    private java.lang.Boolean isSystem;
    private java.lang.Boolean isArchive;
    private java.lang.Boolean isHidden;
    private java.lang.Boolean isReadOnly;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.atomic.document.FileMetadata.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.filePath)) {
        this.filePath = data().deepCopy(fields()[0].schema(), other.filePath);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.size)) {
        this.size = data().deepCopy(fields()[1].schema(), other.size);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.timestampModified)) {
        this.timestampModified = data().deepCopy(fields()[2].schema(), other.timestampModified);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.timestampLastAccess)) {
        this.timestampLastAccess = data().deepCopy(fields()[3].schema(), other.timestampLastAccess);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.isSystem)) {
        this.isSystem = data().deepCopy(fields()[4].schema(), other.isSystem);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.isArchive)) {
        this.isArchive = data().deepCopy(fields()[5].schema(), other.isArchive);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.isHidden)) {
        this.isHidden = data().deepCopy(fields()[6].schema(), other.isHidden);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.isReadOnly)) {
        this.isReadOnly = data().deepCopy(fields()[7].schema(), other.isReadOnly);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
    }

    /**
     * Creates a Builder by copying an existing FileMetadata instance
     * @param other The existing instance to copy.
     */
    private Builder(com.atomic.document.FileMetadata other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.filePath)) {
        this.filePath = data().deepCopy(fields()[0].schema(), other.filePath);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.size)) {
        this.size = data().deepCopy(fields()[1].schema(), other.size);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.timestampModified)) {
        this.timestampModified = data().deepCopy(fields()[2].schema(), other.timestampModified);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.timestampLastAccess)) {
        this.timestampLastAccess = data().deepCopy(fields()[3].schema(), other.timestampLastAccess);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.isSystem)) {
        this.isSystem = data().deepCopy(fields()[4].schema(), other.isSystem);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.isArchive)) {
        this.isArchive = data().deepCopy(fields()[5].schema(), other.isArchive);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.isHidden)) {
        this.isHidden = data().deepCopy(fields()[6].schema(), other.isHidden);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.isReadOnly)) {
        this.isReadOnly = data().deepCopy(fields()[7].schema(), other.isReadOnly);
        fieldSetFlags()[7] = true;
      }
    }

    /**
      * Gets the value of the 'filePath' field.
      * @return The value.
      */
    public java.lang.String getFilePath() {
      return filePath;
    }


    /**
      * Sets the value of the 'filePath' field.
      * @param value The value of 'filePath'.
      * @return This builder.
      */
    public com.atomic.document.FileMetadata.Builder setFilePath(java.lang.String value) {
      validate(fields()[0], value);
      this.filePath = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'filePath' field has been set.
      * @return True if the 'filePath' field has been set, false otherwise.
      */
    public boolean hasFilePath() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'filePath' field.
      * @return This builder.
      */
    public com.atomic.document.FileMetadata.Builder clearFilePath() {
      filePath = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'size' field.
      * @return The value.
      */
    public java.lang.Long getSize() {
      return size;
    }


    /**
      * Sets the value of the 'size' field.
      * @param value The value of 'size'.
      * @return This builder.
      */
    public com.atomic.document.FileMetadata.Builder setSize(java.lang.Long value) {
      validate(fields()[1], value);
      this.size = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'size' field has been set.
      * @return True if the 'size' field has been set, false otherwise.
      */
    public boolean hasSize() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'size' field.
      * @return This builder.
      */
    public com.atomic.document.FileMetadata.Builder clearSize() {
      size = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestampModified' field.
      * File timestamp modified from java BasicFileAttributes.
      * @return The value.
      */
    public java.time.Instant getTimestampModified() {
      return timestampModified;
    }


    /**
      * Sets the value of the 'timestampModified' field.
      * File timestamp modified from java BasicFileAttributes.
      * @param value The value of 'timestampModified'.
      * @return This builder.
      */
    public com.atomic.document.FileMetadata.Builder setTimestampModified(java.time.Instant value) {
      validate(fields()[2], value);
      this.timestampModified = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'timestampModified' field has been set.
      * File timestamp modified from java BasicFileAttributes.
      * @return True if the 'timestampModified' field has been set, false otherwise.
      */
    public boolean hasTimestampModified() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'timestampModified' field.
      * File timestamp modified from java BasicFileAttributes.
      * @return This builder.
      */
    public com.atomic.document.FileMetadata.Builder clearTimestampModified() {
      timestampModified = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestampLastAccess' field.
      * File timestamp of last access.
      * @return The value.
      */
    public java.time.Instant getTimestampLastAccess() {
      return timestampLastAccess;
    }


    /**
      * Sets the value of the 'timestampLastAccess' field.
      * File timestamp of last access.
      * @param value The value of 'timestampLastAccess'.
      * @return This builder.
      */
    public com.atomic.document.FileMetadata.Builder setTimestampLastAccess(java.time.Instant value) {
      validate(fields()[3], value);
      this.timestampLastAccess = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'timestampLastAccess' field has been set.
      * File timestamp of last access.
      * @return True if the 'timestampLastAccess' field has been set, false otherwise.
      */
    public boolean hasTimestampLastAccess() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'timestampLastAccess' field.
      * File timestamp of last access.
      * @return This builder.
      */
    public com.atomic.document.FileMetadata.Builder clearTimestampLastAccess() {
      timestampLastAccess = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'isSystem' field.
      * @return The value.
      */
    public java.lang.Boolean getIsSystem() {
      return isSystem;
    }


    /**
      * Sets the value of the 'isSystem' field.
      * @param value The value of 'isSystem'.
      * @return This builder.
      */
    public com.atomic.document.FileMetadata.Builder setIsSystem(java.lang.Boolean value) {
      validate(fields()[4], value);
      this.isSystem = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'isSystem' field has been set.
      * @return True if the 'isSystem' field has been set, false otherwise.
      */
    public boolean hasIsSystem() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'isSystem' field.
      * @return This builder.
      */
    public com.atomic.document.FileMetadata.Builder clearIsSystem() {
      isSystem = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'isArchive' field.
      * @return The value.
      */
    public java.lang.Boolean getIsArchive() {
      return isArchive;
    }


    /**
      * Sets the value of the 'isArchive' field.
      * @param value The value of 'isArchive'.
      * @return This builder.
      */
    public com.atomic.document.FileMetadata.Builder setIsArchive(java.lang.Boolean value) {
      validate(fields()[5], value);
      this.isArchive = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'isArchive' field has been set.
      * @return True if the 'isArchive' field has been set, false otherwise.
      */
    public boolean hasIsArchive() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'isArchive' field.
      * @return This builder.
      */
    public com.atomic.document.FileMetadata.Builder clearIsArchive() {
      isArchive = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'isHidden' field.
      * @return The value.
      */
    public java.lang.Boolean getIsHidden() {
      return isHidden;
    }


    /**
      * Sets the value of the 'isHidden' field.
      * @param value The value of 'isHidden'.
      * @return This builder.
      */
    public com.atomic.document.FileMetadata.Builder setIsHidden(java.lang.Boolean value) {
      validate(fields()[6], value);
      this.isHidden = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'isHidden' field has been set.
      * @return True if the 'isHidden' field has been set, false otherwise.
      */
    public boolean hasIsHidden() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'isHidden' field.
      * @return This builder.
      */
    public com.atomic.document.FileMetadata.Builder clearIsHidden() {
      isHidden = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'isReadOnly' field.
      * @return The value.
      */
    public java.lang.Boolean getIsReadOnly() {
      return isReadOnly;
    }


    /**
      * Sets the value of the 'isReadOnly' field.
      * @param value The value of 'isReadOnly'.
      * @return This builder.
      */
    public com.atomic.document.FileMetadata.Builder setIsReadOnly(java.lang.Boolean value) {
      validate(fields()[7], value);
      this.isReadOnly = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'isReadOnly' field has been set.
      * @return True if the 'isReadOnly' field has been set, false otherwise.
      */
    public boolean hasIsReadOnly() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'isReadOnly' field.
      * @return This builder.
      */
    public com.atomic.document.FileMetadata.Builder clearIsReadOnly() {
      isReadOnly = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public FileMetadata build() {
      try {
        FileMetadata record = new FileMetadata();
        record.filePath = fieldSetFlags()[0] ? this.filePath : (java.lang.String) defaultValue(fields()[0]);
        record.size = fieldSetFlags()[1] ? this.size : (java.lang.Long) defaultValue(fields()[1]);
        record.timestampModified = fieldSetFlags()[2] ? this.timestampModified : (java.time.Instant) defaultValue(fields()[2]);
        record.timestampLastAccess = fieldSetFlags()[3] ? this.timestampLastAccess : (java.time.Instant) defaultValue(fields()[3]);
        record.isSystem = fieldSetFlags()[4] ? this.isSystem : (java.lang.Boolean) defaultValue(fields()[4]);
        record.isArchive = fieldSetFlags()[5] ? this.isArchive : (java.lang.Boolean) defaultValue(fields()[5]);
        record.isHidden = fieldSetFlags()[6] ? this.isHidden : (java.lang.Boolean) defaultValue(fields()[6]);
        record.isReadOnly = fieldSetFlags()[7] ? this.isReadOnly : (java.lang.Boolean) defaultValue(fields()[7]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<FileMetadata>
    WRITER$ = (org.apache.avro.io.DatumWriter<FileMetadata>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<FileMetadata>
    READER$ = (org.apache.avro.io.DatumReader<FileMetadata>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










