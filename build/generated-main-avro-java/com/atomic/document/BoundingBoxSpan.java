/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.atomic.document;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class BoundingBoxSpan extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -250324882661852854L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"BoundingBoxSpan\",\"namespace\":\"com.atomic.document\",\"fields\":[{\"name\":\"bounding_box\",\"type\":[\"null\",{\"type\":\"array\",\"items\":[\"null\",{\"type\":\"array\",\"items\":[\"null\",\"int\"]}]}],\"default\":null},{\"name\":\"end\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"start\",\"type\":[\"null\",\"int\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<BoundingBoxSpan> ENCODER =
      new BinaryMessageEncoder<BoundingBoxSpan>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<BoundingBoxSpan> DECODER =
      new BinaryMessageDecoder<BoundingBoxSpan>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<BoundingBoxSpan> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<BoundingBoxSpan> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<BoundingBoxSpan> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<BoundingBoxSpan>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this BoundingBoxSpan to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a BoundingBoxSpan from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a BoundingBoxSpan instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static BoundingBoxSpan fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.util.List<java.util.List<java.lang.Integer>> bounding_box;
  private java.lang.Integer end;
  private java.lang.Integer start;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public BoundingBoxSpan() {}

  /**
   * All-args constructor.
   * @param bounding_box The new value for bounding_box
   * @param end The new value for end
   * @param start The new value for start
   */
  public BoundingBoxSpan(java.util.List<java.util.List<java.lang.Integer>> bounding_box, java.lang.Integer end, java.lang.Integer start) {
    this.bounding_box = bounding_box;
    this.end = end;
    this.start = start;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return bounding_box;
    case 1: return end;
    case 2: return start;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: bounding_box = (java.util.List<java.util.List<java.lang.Integer>>)value$; break;
    case 1: end = (java.lang.Integer)value$; break;
    case 2: start = (java.lang.Integer)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'bounding_box' field.
   * @return The value of the 'bounding_box' field.
   */
  public java.util.List<java.util.List<java.lang.Integer>> getBoundingBox() {
    return bounding_box;
  }


  /**
   * Sets the value of the 'bounding_box' field.
   * @param value the value to set.
   */
  public void setBoundingBox(java.util.List<java.util.List<java.lang.Integer>> value) {
    this.bounding_box = value;
  }

  /**
   * Gets the value of the 'end' field.
   * @return The value of the 'end' field.
   */
  public java.lang.Integer getEnd() {
    return end;
  }


  /**
   * Sets the value of the 'end' field.
   * @param value the value to set.
   */
  public void setEnd(java.lang.Integer value) {
    this.end = value;
  }

  /**
   * Gets the value of the 'start' field.
   * @return The value of the 'start' field.
   */
  public java.lang.Integer getStart() {
    return start;
  }


  /**
   * Sets the value of the 'start' field.
   * @param value the value to set.
   */
  public void setStart(java.lang.Integer value) {
    this.start = value;
  }

  /**
   * Creates a new BoundingBoxSpan RecordBuilder.
   * @return A new BoundingBoxSpan RecordBuilder
   */
  public static com.atomic.document.BoundingBoxSpan.Builder newBuilder() {
    return new com.atomic.document.BoundingBoxSpan.Builder();
  }

  /**
   * Creates a new BoundingBoxSpan RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new BoundingBoxSpan RecordBuilder
   */
  public static com.atomic.document.BoundingBoxSpan.Builder newBuilder(com.atomic.document.BoundingBoxSpan.Builder other) {
    if (other == null) {
      return new com.atomic.document.BoundingBoxSpan.Builder();
    } else {
      return new com.atomic.document.BoundingBoxSpan.Builder(other);
    }
  }

  /**
   * Creates a new BoundingBoxSpan RecordBuilder by copying an existing BoundingBoxSpan instance.
   * @param other The existing instance to copy.
   * @return A new BoundingBoxSpan RecordBuilder
   */
  public static com.atomic.document.BoundingBoxSpan.Builder newBuilder(com.atomic.document.BoundingBoxSpan other) {
    if (other == null) {
      return new com.atomic.document.BoundingBoxSpan.Builder();
    } else {
      return new com.atomic.document.BoundingBoxSpan.Builder(other);
    }
  }

  /**
   * RecordBuilder for BoundingBoxSpan instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<BoundingBoxSpan>
    implements org.apache.avro.data.RecordBuilder<BoundingBoxSpan> {

    private java.util.List<java.util.List<java.lang.Integer>> bounding_box;
    private java.lang.Integer end;
    private java.lang.Integer start;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.atomic.document.BoundingBoxSpan.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.bounding_box)) {
        this.bounding_box = data().deepCopy(fields()[0].schema(), other.bounding_box);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.end)) {
        this.end = data().deepCopy(fields()[1].schema(), other.end);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.start)) {
        this.start = data().deepCopy(fields()[2].schema(), other.start);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing BoundingBoxSpan instance
     * @param other The existing instance to copy.
     */
    private Builder(com.atomic.document.BoundingBoxSpan other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.bounding_box)) {
        this.bounding_box = data().deepCopy(fields()[0].schema(), other.bounding_box);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.end)) {
        this.end = data().deepCopy(fields()[1].schema(), other.end);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.start)) {
        this.start = data().deepCopy(fields()[2].schema(), other.start);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'bounding_box' field.
      * @return The value.
      */
    public java.util.List<java.util.List<java.lang.Integer>> getBoundingBox() {
      return bounding_box;
    }


    /**
      * Sets the value of the 'bounding_box' field.
      * @param value The value of 'bounding_box'.
      * @return This builder.
      */
    public com.atomic.document.BoundingBoxSpan.Builder setBoundingBox(java.util.List<java.util.List<java.lang.Integer>> value) {
      validate(fields()[0], value);
      this.bounding_box = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'bounding_box' field has been set.
      * @return True if the 'bounding_box' field has been set, false otherwise.
      */
    public boolean hasBoundingBox() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'bounding_box' field.
      * @return This builder.
      */
    public com.atomic.document.BoundingBoxSpan.Builder clearBoundingBox() {
      bounding_box = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'end' field.
      * @return The value.
      */
    public java.lang.Integer getEnd() {
      return end;
    }


    /**
      * Sets the value of the 'end' field.
      * @param value The value of 'end'.
      * @return This builder.
      */
    public com.atomic.document.BoundingBoxSpan.Builder setEnd(java.lang.Integer value) {
      validate(fields()[1], value);
      this.end = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'end' field has been set.
      * @return True if the 'end' field has been set, false otherwise.
      */
    public boolean hasEnd() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'end' field.
      * @return This builder.
      */
    public com.atomic.document.BoundingBoxSpan.Builder clearEnd() {
      end = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'start' field.
      * @return The value.
      */
    public java.lang.Integer getStart() {
      return start;
    }


    /**
      * Sets the value of the 'start' field.
      * @param value The value of 'start'.
      * @return This builder.
      */
    public com.atomic.document.BoundingBoxSpan.Builder setStart(java.lang.Integer value) {
      validate(fields()[2], value);
      this.start = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'start' field has been set.
      * @return True if the 'start' field has been set, false otherwise.
      */
    public boolean hasStart() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'start' field.
      * @return This builder.
      */
    public com.atomic.document.BoundingBoxSpan.Builder clearStart() {
      start = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public BoundingBoxSpan build() {
      try {
        BoundingBoxSpan record = new BoundingBoxSpan();
        record.bounding_box = fieldSetFlags()[0] ? this.bounding_box : (java.util.List<java.util.List<java.lang.Integer>>) defaultValue(fields()[0]);
        record.end = fieldSetFlags()[1] ? this.end : (java.lang.Integer) defaultValue(fields()[1]);
        record.start = fieldSetFlags()[2] ? this.start : (java.lang.Integer) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<BoundingBoxSpan>
    WRITER$ = (org.apache.avro.io.DatumWriter<BoundingBoxSpan>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<BoundingBoxSpan>
    READER$ = (org.apache.avro.io.DatumReader<BoundingBoxSpan>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.bounding_box == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size0 = this.bounding_box.size();
      out.writeArrayStart();
      out.setItemCount(size0);
      long actualSize0 = 0;
      for (java.util.List<java.lang.Integer> e0: this.bounding_box) {
        actualSize0++;
        out.startItem();
        if (e0 == null) {
          out.writeIndex(0);
          out.writeNull();
        } else {
          out.writeIndex(1);
          long size1 = e0.size();
          out.writeArrayStart();
          out.setItemCount(size1);
          long actualSize1 = 0;
          for (java.lang.Integer e1: e0) {
            actualSize1++;
            out.startItem();
            if (e1 == null) {
              out.writeIndex(0);
              out.writeNull();
            } else {
              out.writeIndex(1);
              out.writeInt(e1);
            }
          }
          out.writeArrayEnd();
          if (actualSize1 != size1)
            throw new java.util.ConcurrentModificationException("Array-size written was " + size1 + ", but element count was " + actualSize1 + ".");
        }
      }
      out.writeArrayEnd();
      if (actualSize0 != size0)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");
    }

    if (this.end == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.end);
    }

    if (this.start == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.start);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.bounding_box = null;
      } else {
        long size0 = in.readArrayStart();
        java.util.List<java.util.List<java.lang.Integer>> a0 = this.bounding_box;
        if (a0 == null) {
          a0 = new SpecificData.Array<java.util.List<java.lang.Integer>>((int)size0, SCHEMA$.getField("bounding_box").schema().getTypes().get(1));
          this.bounding_box = a0;
        } else a0.clear();
        SpecificData.Array<java.util.List<java.lang.Integer>> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.util.List<java.lang.Integer>>)a0 : null);
        for ( ; 0 < size0; size0 = in.arrayNext()) {
          for ( ; size0 != 0; size0--) {
            java.util.List<java.lang.Integer> e0 = (ga0 != null ? ga0.peek() : null);
            if (in.readIndex() != 1) {
              in.readNull();
              e0 = null;
            } else {
              long size1 = in.readArrayStart();
              java.util.List<java.lang.Integer> a1 = e0;
              if (a1 == null) {
                a1 = new SpecificData.Array<java.lang.Integer>((int)size1, SCHEMA$.getField("bounding_box").schema().getTypes().get(1).getElementType().getTypes().get(1));
                e0 = a1;
              } else a1.clear();
              SpecificData.Array<java.lang.Integer> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Integer>)a1 : null);
              for ( ; 0 < size1; size1 = in.arrayNext()) {
                for ( ; size1 != 0; size1--) {
                  java.lang.Integer e1 = (ga1 != null ? ga1.peek() : null);
                  if (in.readIndex() != 1) {
                    in.readNull();
                    e1 = null;
                  } else {
                    e1 = in.readInt();
                  }
                  a1.add(e1);
                }
              }
            }
            a0.add(e0);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.end = null;
      } else {
        this.end = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.start = null;
      } else {
        this.start = in.readInt();
      }

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.bounding_box = null;
          } else {
            long size0 = in.readArrayStart();
            java.util.List<java.util.List<java.lang.Integer>> a0 = this.bounding_box;
            if (a0 == null) {
              a0 = new SpecificData.Array<java.util.List<java.lang.Integer>>((int)size0, SCHEMA$.getField("bounding_box").schema().getTypes().get(1));
              this.bounding_box = a0;
            } else a0.clear();
            SpecificData.Array<java.util.List<java.lang.Integer>> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.util.List<java.lang.Integer>>)a0 : null);
            for ( ; 0 < size0; size0 = in.arrayNext()) {
              for ( ; size0 != 0; size0--) {
                java.util.List<java.lang.Integer> e0 = (ga0 != null ? ga0.peek() : null);
                if (in.readIndex() != 1) {
                  in.readNull();
                  e0 = null;
                } else {
                  long size1 = in.readArrayStart();
                  java.util.List<java.lang.Integer> a1 = e0;
                  if (a1 == null) {
                    a1 = new SpecificData.Array<java.lang.Integer>((int)size1, SCHEMA$.getField("bounding_box").schema().getTypes().get(1).getElementType().getTypes().get(1));
                    e0 = a1;
                  } else a1.clear();
                  SpecificData.Array<java.lang.Integer> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Integer>)a1 : null);
                  for ( ; 0 < size1; size1 = in.arrayNext()) {
                    for ( ; size1 != 0; size1--) {
                      java.lang.Integer e1 = (ga1 != null ? ga1.peek() : null);
                      if (in.readIndex() != 1) {
                        in.readNull();
                        e1 = null;
                      } else {
                        e1 = in.readInt();
                      }
                      a1.add(e1);
                    }
                  }
                }
                a0.add(e0);
              }
            }
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.end = null;
          } else {
            this.end = in.readInt();
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.start = null;
          } else {
            this.start = in.readInt();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










